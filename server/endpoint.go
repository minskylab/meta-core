// Code generated by kun; DO NOT EDIT.
// github.com/RussellLuo/kun

package server

import (
	"context"

	httpoption "github.com/RussellLuo/kun/pkg/httpoption2"
	"github.com/RussellLuo/validating/v2"
	"github.com/go-kit/kit/endpoint"
	"github.com/minskylab/meta-core/services/structures"
)

type DoneProcessRequest struct {
	ProcessIdentity structures.ProcessIdentity `json:"process_identity"`
}

// ValidateDoneProcessRequest creates a validator for DoneProcessRequest.
func ValidateDoneProcessRequest(newSchema func(*DoneProcessRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*DoneProcessRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type DoneProcessResponse struct {
	Process *structures.Process `json:"process"`
	Err     error               `json:"-"`
}

func (r *DoneProcessResponse) Body() interface{} { return r.Process }

// Failed implements endpoint.Failer.
func (r *DoneProcessResponse) Failed() error { return r.Err }

// MakeEndpointOfDoneProcess creates the endpoint for s.DoneProcess.
func MakeEndpointOfDoneProcess(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*DoneProcessRequest)
		process, err := s.DoneProcess(
			ctx,
			req.ProcessIdentity,
		)
		return &DoneProcessResponse{
			Process: process,
			Err:     err,
		}, nil
	}
}

type ObtainProcessRequest struct {
	ProcessId string `json:"-"`
}

// ValidateObtainProcessRequest creates a validator for ObtainProcessRequest.
func ValidateObtainProcessRequest(newSchema func(*ObtainProcessRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*ObtainProcessRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type ObtainProcessResponse struct {
	Process *structures.Process `json:"process"`
	Err     error               `json:"-"`
}

func (r *ObtainProcessResponse) Body() interface{} { return r.Process }

// Failed implements endpoint.Failer.
func (r *ObtainProcessResponse) Failed() error { return r.Err }

// MakeEndpointOfObtainProcess creates the endpoint for s.ObtainProcess.
func MakeEndpointOfObtainProcess(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*ObtainProcessRequest)
		process, err := s.ObtainProcess(
			ctx,
			req.ProcessId,
		)
		return &ObtainProcessResponse{
			Process: process,
			Err:     err,
		}, nil
	}
}

type PlaceStackRequest struct {
	Definition structures.StackDefinition `json:"definition"`
}

// ValidatePlaceStackRequest creates a validator for PlaceStackRequest.
func ValidatePlaceStackRequest(newSchema func(*PlaceStackRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*PlaceStackRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type PlaceStackResponse struct {
	Stack *structures.Stack `json:"stack"`
	Err   error             `json:"-"`
}

func (r *PlaceStackResponse) Body() interface{} { return r.Stack }

// Failed implements endpoint.Failer.
func (r *PlaceStackResponse) Failed() error { return r.Err }

// MakeEndpointOfPlaceStack creates the endpoint for s.PlaceStack.
func MakeEndpointOfPlaceStack(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*PlaceStackRequest)
		stack, err := s.PlaceStack(
			ctx,
			req.Definition,
		)
		return &PlaceStackResponse{
			Stack: stack,
			Err:   err,
		}, nil
	}
}

type PurgeStackRequest struct {
	S structures.StackIdentity `json:"s"`
}

// ValidatePurgeStackRequest creates a validator for PurgeStackRequest.
func ValidatePurgeStackRequest(newSchema func(*PurgeStackRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*PurgeStackRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type PurgeStackResponse struct {
	Stack *structures.Stack `json:"stack"`
	Err   error             `json:"-"`
}

func (r *PurgeStackResponse) Body() interface{} { return r.Stack }

// Failed implements endpoint.Failer.
func (r *PurgeStackResponse) Failed() error { return r.Err }

// MakeEndpointOfPurgeStack creates the endpoint for s.PurgeStack.
func MakeEndpointOfPurgeStack(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*PurgeStackRequest)
		stack, err := s.PurgeStack(
			ctx,
			req.S,
		)
		return &PurgeStackResponse{
			Stack: stack,
			Err:   err,
		}, nil
	}
}

type StartProcessRequest struct {
	Definition structures.ProcessDefinition `json:"definition"`
}

// ValidateStartProcessRequest creates a validator for StartProcessRequest.
func ValidateStartProcessRequest(newSchema func(*StartProcessRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*StartProcessRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type StartProcessResponse struct {
	Process *structures.Process `json:"process"`
	Err     error               `json:"-"`
}

func (r *StartProcessResponse) Body() interface{} { return r.Process }

// Failed implements endpoint.Failer.
func (r *StartProcessResponse) Failed() error { return r.Err }

// MakeEndpointOfStartProcess creates the endpoint for s.StartProcess.
func MakeEndpointOfStartProcess(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*StartProcessRequest)
		process, err := s.StartProcess(
			ctx,
			req.Definition,
		)
		return &StartProcessResponse{
			Process: process,
			Err:     err,
		}, nil
	}
}

type UpdateStateProcessRequest struct {
	Updater structures.ProcessUpdater `json:"updater"`
}

// ValidateUpdateStateProcessRequest creates a validator for UpdateStateProcessRequest.
func ValidateUpdateStateProcessRequest(newSchema func(*UpdateStateProcessRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*UpdateStateProcessRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type UpdateStateProcessResponse struct {
	Process *structures.Process `json:"process"`
	Err     error               `json:"-"`
}

func (r *UpdateStateProcessResponse) Body() interface{} { return r.Process }

// Failed implements endpoint.Failer.
func (r *UpdateStateProcessResponse) Failed() error { return r.Err }

// MakeEndpointOfUpdateStateProcess creates the endpoint for s.UpdateStateProcess.
func MakeEndpointOfUpdateStateProcess(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*UpdateStateProcessRequest)
		process, err := s.UpdateStateProcess(
			ctx,
			req.Updater,
		)
		return &UpdateStateProcessResponse{
			Process: process,
			Err:     err,
		}, nil
	}
}
