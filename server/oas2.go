// Code generated by kun; DO NOT EDIT.
// github.com/RussellLuo/kun

package server

import (
	"reflect"

	"github.com/RussellLuo/kun/pkg/oas2"
)

var (
	base = `swagger: "2.0"
info:
  title: "No Title"
  version: "0.0.0"
  description: ""
  license:
    name: "MIT"
host: "example.com"
basePath: "/"
schemes:
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"
`

	paths = `
paths:
  /process/done:
    post:
      description: ""
      operationId: "DoneProcess"
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/DoneProcessRequestBody"
      %s
  /process/{processId}:
    get:
      description: ""
      operationId: "ObtainProcess"
      parameters:
        - name: processId
          in: path
          required: true
          type: string
          description: ""
      %s
  /stack/deploy:
    post:
      description: ""
      operationId: "PlaceStack"
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/PlaceStackRequestBody"
      %s
  /stack/purge:
    post:
      description: ""
      operationId: "PurgeStack"
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/PurgeStackRequestBody"
      %s
  /process/start:
    post:
      description: ""
      operationId: "StartProcess"
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/StartProcessRequestBody"
      %s
  /process/update:
    post:
      description: ""
      operationId: "UpdateStateProcess"
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/UpdateStateProcessRequestBody"
      %s
`
)

func getResponses(schema oas2.Schema) []oas2.OASResponses {
	return []oas2.OASResponses{
		oas2.GetOASResponses(schema, "DoneProcess", 200, &DoneProcessResponse{}),
		oas2.GetOASResponses(schema, "ObtainProcess", 200, &ObtainProcessResponse{}),
		oas2.GetOASResponses(schema, "PlaceStack", 200, &PlaceStackResponse{}),
		oas2.GetOASResponses(schema, "PurgeStack", 200, &PurgeStackResponse{}),
		oas2.GetOASResponses(schema, "StartProcess", 200, &StartProcessResponse{}),
		oas2.GetOASResponses(schema, "UpdateStateProcess", 200, &UpdateStateProcessResponse{}),
	}
}

func getDefinitions(schema oas2.Schema) map[string]oas2.Definition {
	defs := make(map[string]oas2.Definition)

	oas2.AddDefinition(defs, "DoneProcessRequestBody", reflect.ValueOf((&DoneProcessRequest{}).ProcessIdentity))
	oas2.AddResponseDefinitions(defs, schema, "DoneProcess", 200, (&DoneProcessResponse{}).Body())

	oas2.AddResponseDefinitions(defs, schema, "ObtainProcess", 200, (&ObtainProcessResponse{}).Body())

	oas2.AddDefinition(defs, "PlaceStackRequestBody", reflect.ValueOf((&PlaceStackRequest{}).Definition))
	oas2.AddResponseDefinitions(defs, schema, "PlaceStack", 200, (&PlaceStackResponse{}).Body())

	oas2.AddDefinition(defs, "PurgeStackRequestBody", reflect.ValueOf((&PurgeStackRequest{}).S))
	oas2.AddResponseDefinitions(defs, schema, "PurgeStack", 200, (&PurgeStackResponse{}).Body())

	oas2.AddDefinition(defs, "StartProcessRequestBody", reflect.ValueOf((&StartProcessRequest{}).Definition))
	oas2.AddResponseDefinitions(defs, schema, "StartProcess", 200, (&StartProcessResponse{}).Body())

	oas2.AddDefinition(defs, "UpdateStateProcessRequestBody", reflect.ValueOf((&UpdateStateProcessRequest{}).Updater))
	oas2.AddResponseDefinitions(defs, schema, "UpdateStateProcess", 200, (&UpdateStateProcessResponse{}).Body())

	return defs
}

func OASv2APIDoc(schema oas2.Schema) string {
	resps := getResponses(schema)
	paths := oas2.GenPaths(resps, paths)

	defs := getDefinitions(schema)
	definitions := oas2.GenDefinitions(defs)

	return base + paths + definitions
}
