// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/minskylab/meta-core/ent/stack"

	"github.com/minskylab/meta-core/ent/deployment"
	uuid "github.com/satori/go.uuid"
)

// StackCreate is the builder for creating a Stack entity.
type StackCreate struct {
	config
	mutation *StackMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *StackCreate) SetCreatedAt(t time.Time) *StackCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *StackCreate) SetNillableCreatedAt(t *time.Time) *StackCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *StackCreate) SetUpdatedAt(t time.Time) *StackCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *StackCreate) SetNillableUpdatedAt(t *time.Time) *StackCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetInstance sets the "instance" field.
func (sc *StackCreate) SetInstance(s string) *StackCreate {
	sc.mutation.SetInstance(s)
	return sc
}

// SetVpcID sets the "vpc_id" field.
func (sc *StackCreate) SetVpcID(s string) *StackCreate {
	sc.mutation.SetVpcID(s)
	return sc
}

// SetPublicIP sets the "public_ip" field.
func (sc *StackCreate) SetPublicIP(s string) *StackCreate {
	sc.mutation.SetPublicIP(s)
	return sc
}

// SetPublicDNS sets the "public_dns" field.
func (sc *StackCreate) SetPublicDNS(s string) *StackCreate {
	sc.mutation.SetPublicDNS(s)
	return sc
}

// SetNillablePublicDNS sets the "public_dns" field if the given value is not nil.
func (sc *StackCreate) SetNillablePublicDNS(s *string) *StackCreate {
	if s != nil {
		sc.SetPublicDNS(*s)
	}
	return sc
}

// SetUsername sets the "username" field.
func (sc *StackCreate) SetUsername(s string) *StackCreate {
	sc.mutation.SetUsername(s)
	return sc
}

// SetSecurityGroup sets the "security_group" field.
func (sc *StackCreate) SetSecurityGroup(s string) *StackCreate {
	sc.mutation.SetSecurityGroup(s)
	return sc
}

// SetKeyPair sets the "key_pair" field.
func (sc *StackCreate) SetKeyPair(s string) *StackCreate {
	sc.mutation.SetKeyPair(s)
	return sc
}

// SetName sets the "name" field.
func (sc *StackCreate) SetName(s string) *StackCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetPrivateKey sets the "private_key" field.
func (sc *StackCreate) SetPrivateKey(s string) *StackCreate {
	sc.mutation.SetPrivateKey(s)
	return sc
}

// SetFilepath sets the "filepath" field.
func (sc *StackCreate) SetFilepath(s string) *StackCreate {
	sc.mutation.SetFilepath(s)
	return sc
}

// SetNillableFilepath sets the "filepath" field if the given value is not nil.
func (sc *StackCreate) SetNillableFilepath(s *string) *StackCreate {
	if s != nil {
		sc.SetFilepath(*s)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *StackCreate) SetID(s string) *StackCreate {
	sc.mutation.SetID(s)
	return sc
}

// SetDeploymentID sets the "deployment" edge to the Deployment entity by ID.
func (sc *StackCreate) SetDeploymentID(id uuid.UUID) *StackCreate {
	sc.mutation.SetDeploymentID(id)
	return sc
}

// SetNillableDeploymentID sets the "deployment" edge to the Deployment entity by ID if the given value is not nil.
func (sc *StackCreate) SetNillableDeploymentID(id *uuid.UUID) *StackCreate {
	if id != nil {
		sc = sc.SetDeploymentID(*id)
	}
	return sc
}

// SetDeployment sets the "deployment" edge to the Deployment entity.
func (sc *StackCreate) SetDeployment(d *Deployment) *StackCreate {
	return sc.SetDeploymentID(d.ID)
}

// Mutation returns the StackMutation object of the builder.
func (sc *StackCreate) Mutation() *StackMutation {
	return sc.mutation
}

// Save creates the Stack in the database.
func (sc *StackCreate) Save(ctx context.Context) (*Stack, error) {
	var (
		err  error
		node *Stack
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StackMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StackCreate) SaveX(ctx context.Context) *Stack {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StackCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StackCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StackCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := stack.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := stack.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StackCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := sc.mutation.Instance(); !ok {
		return &ValidationError{Name: "instance", err: errors.New(`ent: missing required field "instance"`)}
	}
	if _, ok := sc.mutation.VpcID(); !ok {
		return &ValidationError{Name: "vpc_id", err: errors.New(`ent: missing required field "vpc_id"`)}
	}
	if _, ok := sc.mutation.PublicIP(); !ok {
		return &ValidationError{Name: "public_ip", err: errors.New(`ent: missing required field "public_ip"`)}
	}
	if _, ok := sc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "username"`)}
	}
	if _, ok := sc.mutation.SecurityGroup(); !ok {
		return &ValidationError{Name: "security_group", err: errors.New(`ent: missing required field "security_group"`)}
	}
	if _, ok := sc.mutation.KeyPair(); !ok {
		return &ValidationError{Name: "key_pair", err: errors.New(`ent: missing required field "key_pair"`)}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if _, ok := sc.mutation.PrivateKey(); !ok {
		return &ValidationError{Name: "private_key", err: errors.New(`ent: missing required field "private_key"`)}
	}
	return nil
}

func (sc *StackCreate) sqlSave(ctx context.Context) (*Stack, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(string)
	}
	return _node, nil
}

func (sc *StackCreate) createSpec() (*Stack, *sqlgraph.CreateSpec) {
	var (
		_node = &Stack{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: stack.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: stack.FieldID,
			},
		}
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stack.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stack.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.Instance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldInstance,
		})
		_node.Instance = value
	}
	if value, ok := sc.mutation.VpcID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldVpcID,
		})
		_node.VpcID = value
	}
	if value, ok := sc.mutation.PublicIP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldPublicIP,
		})
		_node.PublicIP = value
	}
	if value, ok := sc.mutation.PublicDNS(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldPublicDNS,
		})
		_node.PublicDNS = value
	}
	if value, ok := sc.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldUsername,
		})
		_node.Username = value
	}
	if value, ok := sc.mutation.SecurityGroup(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldSecurityGroup,
		})
		_node.SecurityGroup = value
	}
	if value, ok := sc.mutation.KeyPair(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldKeyPair,
		})
		_node.KeyPair = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldName,
		})
		_node.Name = value
	}
	if value, ok := sc.mutation.PrivateKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldPrivateKey,
		})
		_node.PrivateKey = value
	}
	if value, ok := sc.mutation.Filepath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldFilepath,
		})
		_node.Filepath = value
	}
	if nodes := sc.mutation.DeploymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   stack.DeploymentTable,
			Columns: []string{stack.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deployment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.deployment_stack = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StackCreateBulk is the builder for creating many Stack entities in bulk.
type StackCreateBulk struct {
	config
	builders []*StackCreate
}

// Save creates the Stack entities in the database.
func (scb *StackCreateBulk) Save(ctx context.Context) ([]*Stack, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Stack, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StackMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StackCreateBulk) SaveX(ctx context.Context) []*Stack {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StackCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StackCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
