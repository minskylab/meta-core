// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/minskylab/meta-core/ent/deployment"
	"github.com/minskylab/meta-core/ent/predicate"
	"github.com/minskylab/meta-core/ent/stack"
	uuid "github.com/satori/go.uuid"
)

// StackUpdate is the builder for updating Stack entities.
type StackUpdate struct {
	config
	hooks    []Hook
	mutation *StackMutation
}

// Where appends a list predicates to the StackUpdate builder.
func (su *StackUpdate) Where(ps ...predicate.Stack) *StackUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *StackUpdate) SetCreatedAt(t time.Time) *StackUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *StackUpdate) SetNillableCreatedAt(t *time.Time) *StackUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StackUpdate) SetUpdatedAt(t time.Time) *StackUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetInstance sets the "instance" field.
func (su *StackUpdate) SetInstance(s string) *StackUpdate {
	su.mutation.SetInstance(s)
	return su
}

// SetVpcID sets the "vpc_id" field.
func (su *StackUpdate) SetVpcID(s string) *StackUpdate {
	su.mutation.SetVpcID(s)
	return su
}

// SetPublicIP sets the "public_ip" field.
func (su *StackUpdate) SetPublicIP(s string) *StackUpdate {
	su.mutation.SetPublicIP(s)
	return su
}

// SetPublicDNS sets the "public_dns" field.
func (su *StackUpdate) SetPublicDNS(s string) *StackUpdate {
	su.mutation.SetPublicDNS(s)
	return su
}

// SetNillablePublicDNS sets the "public_dns" field if the given value is not nil.
func (su *StackUpdate) SetNillablePublicDNS(s *string) *StackUpdate {
	if s != nil {
		su.SetPublicDNS(*s)
	}
	return su
}

// ClearPublicDNS clears the value of the "public_dns" field.
func (su *StackUpdate) ClearPublicDNS() *StackUpdate {
	su.mutation.ClearPublicDNS()
	return su
}

// SetUsername sets the "username" field.
func (su *StackUpdate) SetUsername(s string) *StackUpdate {
	su.mutation.SetUsername(s)
	return su
}

// SetSecurityGroup sets the "security_group" field.
func (su *StackUpdate) SetSecurityGroup(s string) *StackUpdate {
	su.mutation.SetSecurityGroup(s)
	return su
}

// SetKeyPair sets the "key_pair" field.
func (su *StackUpdate) SetKeyPair(s string) *StackUpdate {
	su.mutation.SetKeyPair(s)
	return su
}

// SetName sets the "name" field.
func (su *StackUpdate) SetName(s string) *StackUpdate {
	su.mutation.SetName(s)
	return su
}

// SetPrivateKey sets the "private_key" field.
func (su *StackUpdate) SetPrivateKey(s string) *StackUpdate {
	su.mutation.SetPrivateKey(s)
	return su
}

// SetFilepath sets the "filepath" field.
func (su *StackUpdate) SetFilepath(s string) *StackUpdate {
	su.mutation.SetFilepath(s)
	return su
}

// SetNillableFilepath sets the "filepath" field if the given value is not nil.
func (su *StackUpdate) SetNillableFilepath(s *string) *StackUpdate {
	if s != nil {
		su.SetFilepath(*s)
	}
	return su
}

// ClearFilepath clears the value of the "filepath" field.
func (su *StackUpdate) ClearFilepath() *StackUpdate {
	su.mutation.ClearFilepath()
	return su
}

// SetDeploymentID sets the "deployment" edge to the Deployment entity by ID.
func (su *StackUpdate) SetDeploymentID(id uuid.UUID) *StackUpdate {
	su.mutation.SetDeploymentID(id)
	return su
}

// SetNillableDeploymentID sets the "deployment" edge to the Deployment entity by ID if the given value is not nil.
func (su *StackUpdate) SetNillableDeploymentID(id *uuid.UUID) *StackUpdate {
	if id != nil {
		su = su.SetDeploymentID(*id)
	}
	return su
}

// SetDeployment sets the "deployment" edge to the Deployment entity.
func (su *StackUpdate) SetDeployment(d *Deployment) *StackUpdate {
	return su.SetDeploymentID(d.ID)
}

// Mutation returns the StackMutation object of the builder.
func (su *StackUpdate) Mutation() *StackMutation {
	return su.mutation
}

// ClearDeployment clears the "deployment" edge to the Deployment entity.
func (su *StackUpdate) ClearDeployment() *StackUpdate {
	su.mutation.ClearDeployment()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StackUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	su.defaults()
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StackMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StackUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StackUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StackUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StackUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := stack.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

func (su *StackUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   stack.Table,
			Columns: stack.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: stack.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stack.FieldCreatedAt,
		})
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stack.FieldUpdatedAt,
		})
	}
	if value, ok := su.mutation.Instance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldInstance,
		})
	}
	if value, ok := su.mutation.VpcID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldVpcID,
		})
	}
	if value, ok := su.mutation.PublicIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldPublicIP,
		})
	}
	if value, ok := su.mutation.PublicDNS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldPublicDNS,
		})
	}
	if su.mutation.PublicDNSCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stack.FieldPublicDNS,
		})
	}
	if value, ok := su.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldUsername,
		})
	}
	if value, ok := su.mutation.SecurityGroup(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldSecurityGroup,
		})
	}
	if value, ok := su.mutation.KeyPair(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldKeyPair,
		})
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldName,
		})
	}
	if value, ok := su.mutation.PrivateKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldPrivateKey,
		})
	}
	if value, ok := su.mutation.Filepath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldFilepath,
		})
	}
	if su.mutation.FilepathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stack.FieldFilepath,
		})
	}
	if su.mutation.DeploymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   stack.DeploymentTable,
			Columns: []string{stack.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deployment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.DeploymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   stack.DeploymentTable,
			Columns: []string{stack.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deployment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stack.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StackUpdateOne is the builder for updating a single Stack entity.
type StackUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StackMutation
}

// SetCreatedAt sets the "created_at" field.
func (suo *StackUpdateOne) SetCreatedAt(t time.Time) *StackUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *StackUpdateOne) SetNillableCreatedAt(t *time.Time) *StackUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StackUpdateOne) SetUpdatedAt(t time.Time) *StackUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetInstance sets the "instance" field.
func (suo *StackUpdateOne) SetInstance(s string) *StackUpdateOne {
	suo.mutation.SetInstance(s)
	return suo
}

// SetVpcID sets the "vpc_id" field.
func (suo *StackUpdateOne) SetVpcID(s string) *StackUpdateOne {
	suo.mutation.SetVpcID(s)
	return suo
}

// SetPublicIP sets the "public_ip" field.
func (suo *StackUpdateOne) SetPublicIP(s string) *StackUpdateOne {
	suo.mutation.SetPublicIP(s)
	return suo
}

// SetPublicDNS sets the "public_dns" field.
func (suo *StackUpdateOne) SetPublicDNS(s string) *StackUpdateOne {
	suo.mutation.SetPublicDNS(s)
	return suo
}

// SetNillablePublicDNS sets the "public_dns" field if the given value is not nil.
func (suo *StackUpdateOne) SetNillablePublicDNS(s *string) *StackUpdateOne {
	if s != nil {
		suo.SetPublicDNS(*s)
	}
	return suo
}

// ClearPublicDNS clears the value of the "public_dns" field.
func (suo *StackUpdateOne) ClearPublicDNS() *StackUpdateOne {
	suo.mutation.ClearPublicDNS()
	return suo
}

// SetUsername sets the "username" field.
func (suo *StackUpdateOne) SetUsername(s string) *StackUpdateOne {
	suo.mutation.SetUsername(s)
	return suo
}

// SetSecurityGroup sets the "security_group" field.
func (suo *StackUpdateOne) SetSecurityGroup(s string) *StackUpdateOne {
	suo.mutation.SetSecurityGroup(s)
	return suo
}

// SetKeyPair sets the "key_pair" field.
func (suo *StackUpdateOne) SetKeyPair(s string) *StackUpdateOne {
	suo.mutation.SetKeyPair(s)
	return suo
}

// SetName sets the "name" field.
func (suo *StackUpdateOne) SetName(s string) *StackUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetPrivateKey sets the "private_key" field.
func (suo *StackUpdateOne) SetPrivateKey(s string) *StackUpdateOne {
	suo.mutation.SetPrivateKey(s)
	return suo
}

// SetFilepath sets the "filepath" field.
func (suo *StackUpdateOne) SetFilepath(s string) *StackUpdateOne {
	suo.mutation.SetFilepath(s)
	return suo
}

// SetNillableFilepath sets the "filepath" field if the given value is not nil.
func (suo *StackUpdateOne) SetNillableFilepath(s *string) *StackUpdateOne {
	if s != nil {
		suo.SetFilepath(*s)
	}
	return suo
}

// ClearFilepath clears the value of the "filepath" field.
func (suo *StackUpdateOne) ClearFilepath() *StackUpdateOne {
	suo.mutation.ClearFilepath()
	return suo
}

// SetDeploymentID sets the "deployment" edge to the Deployment entity by ID.
func (suo *StackUpdateOne) SetDeploymentID(id uuid.UUID) *StackUpdateOne {
	suo.mutation.SetDeploymentID(id)
	return suo
}

// SetNillableDeploymentID sets the "deployment" edge to the Deployment entity by ID if the given value is not nil.
func (suo *StackUpdateOne) SetNillableDeploymentID(id *uuid.UUID) *StackUpdateOne {
	if id != nil {
		suo = suo.SetDeploymentID(*id)
	}
	return suo
}

// SetDeployment sets the "deployment" edge to the Deployment entity.
func (suo *StackUpdateOne) SetDeployment(d *Deployment) *StackUpdateOne {
	return suo.SetDeploymentID(d.ID)
}

// Mutation returns the StackMutation object of the builder.
func (suo *StackUpdateOne) Mutation() *StackMutation {
	return suo.mutation
}

// ClearDeployment clears the "deployment" edge to the Deployment entity.
func (suo *StackUpdateOne) ClearDeployment() *StackUpdateOne {
	suo.mutation.ClearDeployment()
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StackUpdateOne) Select(field string, fields ...string) *StackUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Stack entity.
func (suo *StackUpdateOne) Save(ctx context.Context) (*Stack, error) {
	var (
		err  error
		node *Stack
	)
	suo.defaults()
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StackMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StackUpdateOne) SaveX(ctx context.Context) *Stack {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StackUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StackUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StackUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := stack.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

func (suo *StackUpdateOne) sqlSave(ctx context.Context) (_node *Stack, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   stack.Table,
			Columns: stack.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: stack.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Stack.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stack.FieldID)
		for _, f := range fields {
			if !stack.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stack.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stack.FieldCreatedAt,
		})
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stack.FieldUpdatedAt,
		})
	}
	if value, ok := suo.mutation.Instance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldInstance,
		})
	}
	if value, ok := suo.mutation.VpcID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldVpcID,
		})
	}
	if value, ok := suo.mutation.PublicIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldPublicIP,
		})
	}
	if value, ok := suo.mutation.PublicDNS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldPublicDNS,
		})
	}
	if suo.mutation.PublicDNSCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stack.FieldPublicDNS,
		})
	}
	if value, ok := suo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldUsername,
		})
	}
	if value, ok := suo.mutation.SecurityGroup(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldSecurityGroup,
		})
	}
	if value, ok := suo.mutation.KeyPair(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldKeyPair,
		})
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldName,
		})
	}
	if value, ok := suo.mutation.PrivateKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldPrivateKey,
		})
	}
	if value, ok := suo.mutation.Filepath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stack.FieldFilepath,
		})
	}
	if suo.mutation.FilepathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stack.FieldFilepath,
		})
	}
	if suo.mutation.DeploymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   stack.DeploymentTable,
			Columns: []string{stack.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deployment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.DeploymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   stack.DeploymentTable,
			Columns: []string{stack.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deployment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Stack{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stack.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
