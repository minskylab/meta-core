// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/minskylab/meta-core/ent/process"
	"github.com/minskylab/meta-core/ent/stack"
)

// Process is the model entity for the Process schema.
type Process struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// InstanceType holds the value of the "instance_type" field.
	InstanceType string `json:"instance_type,omitempty"`
	// AmiID holds the value of the "ami_id" field.
	AmiID string `json:"ami_id,omitempty"`
	// ResourcePrefix holds the value of the "resource_prefix" field.
	ResourcePrefix string `json:"resource_prefix,omitempty"`
	// Timeout holds the value of the "timeout" field.
	Timeout int `json:"timeout,omitempty"`
	// Expiration holds the value of the "expiration" field.
	Expiration int `json:"expiration,omitempty"`
	// State holds the value of the "state" field.
	State process.State `json:"state,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProcessQuery when eager-loading is set.
	Edges         ProcessEdges `json:"edges"`
	process_stack *string
}

// ProcessEdges holds the relations/edges for other nodes in the graph.
type ProcessEdges struct {
	// Stack holds the value of the stack edge.
	Stack *Stack `json:"stack,omitempty"`
	// Credentials holds the value of the credentials edge.
	Credentials []*Credential `json:"credentials,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// StackOrErr returns the Stack value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProcessEdges) StackOrErr() (*Stack, error) {
	if e.loadedTypes[0] {
		if e.Stack == nil {
			// The edge stack was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: stack.Label}
		}
		return e.Stack, nil
	}
	return nil, &NotLoadedError{edge: "stack"}
}

// CredentialsOrErr returns the Credentials value or an error if the edge
// was not loaded in eager-loading.
func (e ProcessEdges) CredentialsOrErr() ([]*Credential, error) {
	if e.loadedTypes[1] {
		return e.Credentials, nil
	}
	return nil, &NotLoadedError{edge: "credentials"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e ProcessEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[2] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Process) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case process.FieldTimeout, process.FieldExpiration:
			values[i] = new(sql.NullInt64)
		case process.FieldID, process.FieldName, process.FieldToken, process.FieldInstanceType, process.FieldAmiID, process.FieldResourcePrefix, process.FieldState:
			values[i] = new(sql.NullString)
		case process.FieldCreatedAt, process.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case process.ForeignKeys[0]: // process_stack
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Process", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Process fields.
func (pr *Process) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case process.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pr.ID = value.String
			}
		case process.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case process.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case process.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case process.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				pr.Token = value.String
			}
		case process.FieldInstanceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instance_type", values[i])
			} else if value.Valid {
				pr.InstanceType = value.String
			}
		case process.FieldAmiID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ami_id", values[i])
			} else if value.Valid {
				pr.AmiID = value.String
			}
		case process.FieldResourcePrefix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_prefix", values[i])
			} else if value.Valid {
				pr.ResourcePrefix = value.String
			}
		case process.FieldTimeout:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timeout", values[i])
			} else if value.Valid {
				pr.Timeout = int(value.Int64)
			}
		case process.FieldExpiration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expiration", values[i])
			} else if value.Valid {
				pr.Expiration = int(value.Int64)
			}
		case process.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				pr.State = process.State(value.String)
			}
		case process.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_stack", values[i])
			} else if value.Valid {
				pr.process_stack = new(string)
				*pr.process_stack = value.String
			}
		}
	}
	return nil
}

// QueryStack queries the "stack" edge of the Process entity.
func (pr *Process) QueryStack() *StackQuery {
	return (&ProcessClient{config: pr.config}).QueryStack(pr)
}

// QueryCredentials queries the "credentials" edge of the Process entity.
func (pr *Process) QueryCredentials() *CredentialQuery {
	return (&ProcessClient{config: pr.config}).QueryCredentials(pr)
}

// QueryTasks queries the "tasks" edge of the Process entity.
func (pr *Process) QueryTasks() *TaskQuery {
	return (&ProcessClient{config: pr.config}).QueryTasks(pr)
}

// Update returns a builder for updating this Process.
// Note that you need to call Process.Unwrap() before calling this method if this Process
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Process) Update() *ProcessUpdateOne {
	return (&ProcessClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Process entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Process) Unwrap() *Process {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Process is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Process) String() string {
	var builder strings.Builder
	builder.WriteString("Process(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", token=")
	builder.WriteString(pr.Token)
	builder.WriteString(", instance_type=")
	builder.WriteString(pr.InstanceType)
	builder.WriteString(", ami_id=")
	builder.WriteString(pr.AmiID)
	builder.WriteString(", resource_prefix=")
	builder.WriteString(pr.ResourcePrefix)
	builder.WriteString(", timeout=")
	builder.WriteString(fmt.Sprintf("%v", pr.Timeout))
	builder.WriteString(", expiration=")
	builder.WriteString(fmt.Sprintf("%v", pr.Expiration))
	builder.WriteString(", state=")
	builder.WriteString(fmt.Sprintf("%v", pr.State))
	builder.WriteByte(')')
	return builder.String()
}

// Processes is a parsable slice of Process.
type Processes []*Process

func (pr Processes) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
