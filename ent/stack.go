// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/minskylab/meta-core/ent/stack"

	"github.com/minskylab/meta-core/ent/deployment"
	uuid "github.com/satori/go.uuid"
)

// Stack is the model entity for the Stack schema.
type Stack struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Instance holds the value of the "instance" field.
	Instance string `json:"instance,omitempty"`
	// VpcID holds the value of the "vpc_id" field.
	VpcID string `json:"vpc_id,omitempty"`
	// PublicIP holds the value of the "public_ip" field.
	PublicIP string `json:"public_ip,omitempty"`
	// PublicDNS holds the value of the "public_dns" field.
	PublicDNS string `json:"public_dns,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// SecurityGroup holds the value of the "security_group" field.
	SecurityGroup string `json:"security_group,omitempty"`
	// KeyPair holds the value of the "key_pair" field.
	KeyPair string `json:"key_pair,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// PrivateKey holds the value of the "private_key" field.
	PrivateKey string `json:"private_key,omitempty"`
	// Filepath holds the value of the "filepath" field.
	Filepath string `json:"filepath,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StackQuery when eager-loading is set.
	Edges            StackEdges `json:"edges"`
	deployment_stack *uuid.UUID
}

// StackEdges holds the relations/edges for other nodes in the graph.
type StackEdges struct {
	// Deployment holds the value of the deployment edge.
	Deployment *Deployment `json:"deployment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DeploymentOrErr returns the Deployment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StackEdges) DeploymentOrErr() (*Deployment, error) {
	if e.loadedTypes[0] {
		if e.Deployment == nil {
			// The edge deployment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: deployment.Label}
		}
		return e.Deployment, nil
	}
	return nil, &NotLoadedError{edge: "deployment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Stack) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case stack.FieldID, stack.FieldInstance, stack.FieldVpcID, stack.FieldPublicIP, stack.FieldPublicDNS, stack.FieldUsername, stack.FieldSecurityGroup, stack.FieldKeyPair, stack.FieldName, stack.FieldPrivateKey, stack.FieldFilepath:
			values[i] = new(sql.NullString)
		case stack.FieldCreatedAt, stack.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case stack.ForeignKeys[0]: // deployment_stack
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Stack", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Stack fields.
func (s *Stack) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stack.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case stack.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case stack.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case stack.FieldInstance:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instance", values[i])
			} else if value.Valid {
				s.Instance = value.String
			}
		case stack.FieldVpcID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vpc_id", values[i])
			} else if value.Valid {
				s.VpcID = value.String
			}
		case stack.FieldPublicIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field public_ip", values[i])
			} else if value.Valid {
				s.PublicIP = value.String
			}
		case stack.FieldPublicDNS:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field public_dns", values[i])
			} else if value.Valid {
				s.PublicDNS = value.String
			}
		case stack.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				s.Username = value.String
			}
		case stack.FieldSecurityGroup:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field security_group", values[i])
			} else if value.Valid {
				s.SecurityGroup = value.String
			}
		case stack.FieldKeyPair:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key_pair", values[i])
			} else if value.Valid {
				s.KeyPair = value.String
			}
		case stack.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case stack.FieldPrivateKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field private_key", values[i])
			} else if value.Valid {
				s.PrivateKey = value.String
			}
		case stack.FieldFilepath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field filepath", values[i])
			} else if value.Valid {
				s.Filepath = value.String
			}
		case stack.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_stack", values[i])
			} else if value.Valid {
				s.deployment_stack = new(uuid.UUID)
				*s.deployment_stack = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryDeployment queries the "deployment" edge of the Stack entity.
func (s *Stack) QueryDeployment() *DeploymentQuery {
	return (&StackClient{config: s.config}).QueryDeployment(s)
}

// Update returns a builder for updating this Stack.
// Note that you need to call Stack.Unwrap() before calling this method if this Stack
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Stack) Update() *StackUpdateOne {
	return (&StackClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Stack entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Stack) Unwrap() *Stack {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Stack is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Stack) String() string {
	var builder strings.Builder
	builder.WriteString("Stack(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", instance=")
	builder.WriteString(s.Instance)
	builder.WriteString(", vpc_id=")
	builder.WriteString(s.VpcID)
	builder.WriteString(", public_ip=")
	builder.WriteString(s.PublicIP)
	builder.WriteString(", public_dns=")
	builder.WriteString(s.PublicDNS)
	builder.WriteString(", username=")
	builder.WriteString(s.Username)
	builder.WriteString(", security_group=")
	builder.WriteString(s.SecurityGroup)
	builder.WriteString(", key_pair=")
	builder.WriteString(s.KeyPair)
	builder.WriteString(", name=")
	builder.WriteString(s.Name)
	builder.WriteString(", private_key=")
	builder.WriteString(s.PrivateKey)
	builder.WriteString(", filepath=")
	builder.WriteString(s.Filepath)
	builder.WriteByte(')')
	return builder.String()
}

// Stacks is a parsable slice of Stack.
type Stacks []*Stack

func (s Stacks) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
