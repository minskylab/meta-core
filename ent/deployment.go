// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/minskylab/meta-core/ent/deployment"

	"github.com/minskylab/meta-core/ent/provider"
	"github.com/minskylab/meta-core/ent/stack"
	uuid "github.com/satori/go.uuid"
)

// Deployment is the model entity for the Deployment schema.
type Deployment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// State holds the value of the "state" field.
	State deployment.State `json:"state,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Timeout holds the value of the "timeout" field.
	Timeout int `json:"timeout,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeploymentQuery when eager-loading is set.
	Edges               DeploymentEdges `json:"edges"`
	deployment_provider *uuid.UUID
}

// DeploymentEdges holds the relations/edges for other nodes in the graph.
type DeploymentEdges struct {
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// Provider holds the value of the provider edge.
	Provider *Provider `json:"provider,omitempty"`
	// Stack holds the value of the stack edge.
	Stack *Stack `json:"stack,omitempty"`
	// Credentials holds the value of the credentials edge.
	Credentials []*Credential `json:"credentials,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e DeploymentEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[0] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// ProviderOrErr returns the Provider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeploymentEdges) ProviderOrErr() (*Provider, error) {
	if e.loadedTypes[1] {
		if e.Provider == nil {
			// The edge provider was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: provider.Label}
		}
		return e.Provider, nil
	}
	return nil, &NotLoadedError{edge: "provider"}
}

// StackOrErr returns the Stack value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeploymentEdges) StackOrErr() (*Stack, error) {
	if e.loadedTypes[2] {
		if e.Stack == nil {
			// The edge stack was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: stack.Label}
		}
		return e.Stack, nil
	}
	return nil, &NotLoadedError{edge: "stack"}
}

// CredentialsOrErr returns the Credentials value or an error if the edge
// was not loaded in eager-loading.
func (e DeploymentEdges) CredentialsOrErr() ([]*Credential, error) {
	if e.loadedTypes[3] {
		return e.Credentials, nil
	}
	return nil, &NotLoadedError{edge: "credentials"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Deployment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case deployment.FieldTimeout:
			values[i] = new(sql.NullInt64)
		case deployment.FieldState, deployment.FieldName:
			values[i] = new(sql.NullString)
		case deployment.FieldCreatedAt, deployment.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case deployment.FieldID:
			values[i] = new(uuid.UUID)
		case deployment.ForeignKeys[0]: // deployment_provider
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Deployment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Deployment fields.
func (d *Deployment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deployment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case deployment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		case deployment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				d.UpdatedAt = value.Time
			}
		case deployment.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				d.State = deployment.State(value.String)
			}
		case deployment.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case deployment.FieldTimeout:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timeout", values[i])
			} else if value.Valid {
				d.Timeout = int(value.Int64)
			}
		case deployment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_provider", values[i])
			} else if value.Valid {
				d.deployment_provider = new(uuid.UUID)
				*d.deployment_provider = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryTasks queries the "tasks" edge of the Deployment entity.
func (d *Deployment) QueryTasks() *TaskQuery {
	return (&DeploymentClient{config: d.config}).QueryTasks(d)
}

// QueryProvider queries the "provider" edge of the Deployment entity.
func (d *Deployment) QueryProvider() *ProviderQuery {
	return (&DeploymentClient{config: d.config}).QueryProvider(d)
}

// QueryStack queries the "stack" edge of the Deployment entity.
func (d *Deployment) QueryStack() *StackQuery {
	return (&DeploymentClient{config: d.config}).QueryStack(d)
}

// QueryCredentials queries the "credentials" edge of the Deployment entity.
func (d *Deployment) QueryCredentials() *CredentialQuery {
	return (&DeploymentClient{config: d.config}).QueryCredentials(d)
}

// Update returns a builder for updating this Deployment.
// Note that you need to call Deployment.Unwrap() before calling this method if this Deployment
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Deployment) Update() *DeploymentUpdateOne {
	return (&DeploymentClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Deployment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Deployment) Unwrap() *Deployment {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Deployment is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Deployment) String() string {
	var builder strings.Builder
	builder.WriteString("Deployment(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(d.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", state=")
	builder.WriteString(fmt.Sprintf("%v", d.State))
	builder.WriteString(", name=")
	builder.WriteString(d.Name)
	builder.WriteString(", timeout=")
	builder.WriteString(fmt.Sprintf("%v", d.Timeout))
	builder.WriteByte(')')
	return builder.String()
}

// Deployments is a parsable slice of Deployment.
type Deployments []*Deployment

func (d Deployments) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
