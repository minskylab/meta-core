// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/minskylab/meta-core/ent/credential"

	"github.com/minskylab/meta-core/ent/deployment"
	uuid "github.com/satori/go.uuid"
)

// Credential is the model entity for the Credential schema.
type Credential struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Registry holds the value of the "registry" field.
	Registry string `json:"registry,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CredentialQuery when eager-loading is set.
	Edges                  CredentialEdges `json:"edges"`
	deployment_credentials *uuid.UUID
	process_credentials    *string
}

// CredentialEdges holds the relations/edges for other nodes in the graph.
type CredentialEdges struct {
	// Deployment holds the value of the deployment edge.
	Deployment *Deployment `json:"deployment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DeploymentOrErr returns the Deployment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CredentialEdges) DeploymentOrErr() (*Deployment, error) {
	if e.loadedTypes[0] {
		if e.Deployment == nil {
			// The edge deployment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: deployment.Label}
		}
		return e.Deployment, nil
	}
	return nil, &NotLoadedError{edge: "deployment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Credential) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case credential.FieldRegistry, credential.FieldUsername, credential.FieldPassword:
			values[i] = new(sql.NullString)
		case credential.FieldCreatedAt, credential.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case credential.FieldID:
			values[i] = new(uuid.UUID)
		case credential.ForeignKeys[0]: // deployment_credentials
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case credential.ForeignKeys[1]: // process_credentials
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Credential", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Credential fields.
func (c *Credential) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case credential.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case credential.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case credential.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case credential.FieldRegistry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field registry", values[i])
			} else if value.Valid {
				c.Registry = value.String
			}
		case credential.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				c.Username = value.String
			}
		case credential.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				c.Password = value.String
			}
		case credential.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_credentials", values[i])
			} else if value.Valid {
				c.deployment_credentials = new(uuid.UUID)
				*c.deployment_credentials = *value.S.(*uuid.UUID)
			}
		case credential.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_credentials", values[i])
			} else if value.Valid {
				c.process_credentials = new(string)
				*c.process_credentials = value.String
			}
		}
	}
	return nil
}

// QueryDeployment queries the "deployment" edge of the Credential entity.
func (c *Credential) QueryDeployment() *DeploymentQuery {
	return (&CredentialClient{config: c.config}).QueryDeployment(c)
}

// Update returns a builder for updating this Credential.
// Note that you need to call Credential.Unwrap() before calling this method if this Credential
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Credential) Update() *CredentialUpdateOne {
	return (&CredentialClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Credential entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Credential) Unwrap() *Credential {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Credential is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Credential) String() string {
	var builder strings.Builder
	builder.WriteString("Credential(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", registry=")
	builder.WriteString(c.Registry)
	builder.WriteString(", username=")
	builder.WriteString(c.Username)
	builder.WriteString(", password=<sensitive>")
	builder.WriteByte(')')
	return builder.String()
}

// Credentials is a parsable slice of Credential.
type Credentials []*Credential

func (c Credentials) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
