// Code generated by entc, DO NOT EDIT.

package stack

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/minskylab/meta-core/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Instance applies equality check predicate on the "instance" field. It's identical to InstanceEQ.
func Instance(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstance), v))
	})
}

// VpcID applies equality check predicate on the "vpc_id" field. It's identical to VpcIDEQ.
func VpcID(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVpcID), v))
	})
}

// PublicIP applies equality check predicate on the "public_ip" field. It's identical to PublicIPEQ.
func PublicIP(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublicIP), v))
	})
}

// PublicDNS applies equality check predicate on the "public_dns" field. It's identical to PublicDNSEQ.
func PublicDNS(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublicDNS), v))
	})
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// SecurityGroup applies equality check predicate on the "security_group" field. It's identical to SecurityGroupEQ.
func SecurityGroup(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSecurityGroup), v))
	})
}

// KeyPair applies equality check predicate on the "key_pair" field. It's identical to KeyPairEQ.
func KeyPair(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKeyPair), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// PrivateKey applies equality check predicate on the "private_key" field. It's identical to PrivateKeyEQ.
func PrivateKey(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrivateKey), v))
	})
}

// Filepath applies equality check predicate on the "filepath" field. It's identical to FilepathEQ.
func Filepath(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilepath), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Stack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Stack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Stack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Stack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// InstanceEQ applies the EQ predicate on the "instance" field.
func InstanceEQ(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstance), v))
	})
}

// InstanceNEQ applies the NEQ predicate on the "instance" field.
func InstanceNEQ(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstance), v))
	})
}

// InstanceIn applies the In predicate on the "instance" field.
func InstanceIn(vs ...string) predicate.Stack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstance), v...))
	})
}

// InstanceNotIn applies the NotIn predicate on the "instance" field.
func InstanceNotIn(vs ...string) predicate.Stack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstance), v...))
	})
}

// InstanceGT applies the GT predicate on the "instance" field.
func InstanceGT(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstance), v))
	})
}

// InstanceGTE applies the GTE predicate on the "instance" field.
func InstanceGTE(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstance), v))
	})
}

// InstanceLT applies the LT predicate on the "instance" field.
func InstanceLT(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstance), v))
	})
}

// InstanceLTE applies the LTE predicate on the "instance" field.
func InstanceLTE(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstance), v))
	})
}

// InstanceContains applies the Contains predicate on the "instance" field.
func InstanceContains(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstance), v))
	})
}

// InstanceHasPrefix applies the HasPrefix predicate on the "instance" field.
func InstanceHasPrefix(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstance), v))
	})
}

// InstanceHasSuffix applies the HasSuffix predicate on the "instance" field.
func InstanceHasSuffix(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstance), v))
	})
}

// InstanceEqualFold applies the EqualFold predicate on the "instance" field.
func InstanceEqualFold(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstance), v))
	})
}

// InstanceContainsFold applies the ContainsFold predicate on the "instance" field.
func InstanceContainsFold(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstance), v))
	})
}

// VpcIDEQ applies the EQ predicate on the "vpc_id" field.
func VpcIDEQ(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVpcID), v))
	})
}

// VpcIDNEQ applies the NEQ predicate on the "vpc_id" field.
func VpcIDNEQ(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVpcID), v))
	})
}

// VpcIDIn applies the In predicate on the "vpc_id" field.
func VpcIDIn(vs ...string) predicate.Stack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVpcID), v...))
	})
}

// VpcIDNotIn applies the NotIn predicate on the "vpc_id" field.
func VpcIDNotIn(vs ...string) predicate.Stack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVpcID), v...))
	})
}

// VpcIDGT applies the GT predicate on the "vpc_id" field.
func VpcIDGT(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVpcID), v))
	})
}

// VpcIDGTE applies the GTE predicate on the "vpc_id" field.
func VpcIDGTE(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVpcID), v))
	})
}

// VpcIDLT applies the LT predicate on the "vpc_id" field.
func VpcIDLT(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVpcID), v))
	})
}

// VpcIDLTE applies the LTE predicate on the "vpc_id" field.
func VpcIDLTE(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVpcID), v))
	})
}

// VpcIDContains applies the Contains predicate on the "vpc_id" field.
func VpcIDContains(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVpcID), v))
	})
}

// VpcIDHasPrefix applies the HasPrefix predicate on the "vpc_id" field.
func VpcIDHasPrefix(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVpcID), v))
	})
}

// VpcIDHasSuffix applies the HasSuffix predicate on the "vpc_id" field.
func VpcIDHasSuffix(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVpcID), v))
	})
}

// VpcIDEqualFold applies the EqualFold predicate on the "vpc_id" field.
func VpcIDEqualFold(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVpcID), v))
	})
}

// VpcIDContainsFold applies the ContainsFold predicate on the "vpc_id" field.
func VpcIDContainsFold(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVpcID), v))
	})
}

// PublicIPEQ applies the EQ predicate on the "public_ip" field.
func PublicIPEQ(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublicIP), v))
	})
}

// PublicIPNEQ applies the NEQ predicate on the "public_ip" field.
func PublicIPNEQ(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPublicIP), v))
	})
}

// PublicIPIn applies the In predicate on the "public_ip" field.
func PublicIPIn(vs ...string) predicate.Stack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPublicIP), v...))
	})
}

// PublicIPNotIn applies the NotIn predicate on the "public_ip" field.
func PublicIPNotIn(vs ...string) predicate.Stack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPublicIP), v...))
	})
}

// PublicIPGT applies the GT predicate on the "public_ip" field.
func PublicIPGT(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPublicIP), v))
	})
}

// PublicIPGTE applies the GTE predicate on the "public_ip" field.
func PublicIPGTE(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPublicIP), v))
	})
}

// PublicIPLT applies the LT predicate on the "public_ip" field.
func PublicIPLT(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPublicIP), v))
	})
}

// PublicIPLTE applies the LTE predicate on the "public_ip" field.
func PublicIPLTE(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPublicIP), v))
	})
}

// PublicIPContains applies the Contains predicate on the "public_ip" field.
func PublicIPContains(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPublicIP), v))
	})
}

// PublicIPHasPrefix applies the HasPrefix predicate on the "public_ip" field.
func PublicIPHasPrefix(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPublicIP), v))
	})
}

// PublicIPHasSuffix applies the HasSuffix predicate on the "public_ip" field.
func PublicIPHasSuffix(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPublicIP), v))
	})
}

// PublicIPEqualFold applies the EqualFold predicate on the "public_ip" field.
func PublicIPEqualFold(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPublicIP), v))
	})
}

// PublicIPContainsFold applies the ContainsFold predicate on the "public_ip" field.
func PublicIPContainsFold(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPublicIP), v))
	})
}

// PublicDNSEQ applies the EQ predicate on the "public_dns" field.
func PublicDNSEQ(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublicDNS), v))
	})
}

// PublicDNSNEQ applies the NEQ predicate on the "public_dns" field.
func PublicDNSNEQ(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPublicDNS), v))
	})
}

// PublicDNSIn applies the In predicate on the "public_dns" field.
func PublicDNSIn(vs ...string) predicate.Stack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPublicDNS), v...))
	})
}

// PublicDNSNotIn applies the NotIn predicate on the "public_dns" field.
func PublicDNSNotIn(vs ...string) predicate.Stack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPublicDNS), v...))
	})
}

// PublicDNSGT applies the GT predicate on the "public_dns" field.
func PublicDNSGT(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPublicDNS), v))
	})
}

// PublicDNSGTE applies the GTE predicate on the "public_dns" field.
func PublicDNSGTE(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPublicDNS), v))
	})
}

// PublicDNSLT applies the LT predicate on the "public_dns" field.
func PublicDNSLT(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPublicDNS), v))
	})
}

// PublicDNSLTE applies the LTE predicate on the "public_dns" field.
func PublicDNSLTE(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPublicDNS), v))
	})
}

// PublicDNSContains applies the Contains predicate on the "public_dns" field.
func PublicDNSContains(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPublicDNS), v))
	})
}

// PublicDNSHasPrefix applies the HasPrefix predicate on the "public_dns" field.
func PublicDNSHasPrefix(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPublicDNS), v))
	})
}

// PublicDNSHasSuffix applies the HasSuffix predicate on the "public_dns" field.
func PublicDNSHasSuffix(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPublicDNS), v))
	})
}

// PublicDNSIsNil applies the IsNil predicate on the "public_dns" field.
func PublicDNSIsNil() predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPublicDNS)))
	})
}

// PublicDNSNotNil applies the NotNil predicate on the "public_dns" field.
func PublicDNSNotNil() predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPublicDNS)))
	})
}

// PublicDNSEqualFold applies the EqualFold predicate on the "public_dns" field.
func PublicDNSEqualFold(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPublicDNS), v))
	})
}

// PublicDNSContainsFold applies the ContainsFold predicate on the "public_dns" field.
func PublicDNSContainsFold(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPublicDNS), v))
	})
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUsername), v))
	})
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.Stack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUsername), v...))
	})
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.Stack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUsername), v...))
	})
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUsername), v))
	})
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUsername), v))
	})
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUsername), v))
	})
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUsername), v))
	})
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUsername), v))
	})
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUsername), v))
	})
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUsername), v))
	})
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUsername), v))
	})
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUsername), v))
	})
}

// SecurityGroupEQ applies the EQ predicate on the "security_group" field.
func SecurityGroupEQ(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSecurityGroup), v))
	})
}

// SecurityGroupNEQ applies the NEQ predicate on the "security_group" field.
func SecurityGroupNEQ(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSecurityGroup), v))
	})
}

// SecurityGroupIn applies the In predicate on the "security_group" field.
func SecurityGroupIn(vs ...string) predicate.Stack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSecurityGroup), v...))
	})
}

// SecurityGroupNotIn applies the NotIn predicate on the "security_group" field.
func SecurityGroupNotIn(vs ...string) predicate.Stack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSecurityGroup), v...))
	})
}

// SecurityGroupGT applies the GT predicate on the "security_group" field.
func SecurityGroupGT(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSecurityGroup), v))
	})
}

// SecurityGroupGTE applies the GTE predicate on the "security_group" field.
func SecurityGroupGTE(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSecurityGroup), v))
	})
}

// SecurityGroupLT applies the LT predicate on the "security_group" field.
func SecurityGroupLT(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSecurityGroup), v))
	})
}

// SecurityGroupLTE applies the LTE predicate on the "security_group" field.
func SecurityGroupLTE(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSecurityGroup), v))
	})
}

// SecurityGroupContains applies the Contains predicate on the "security_group" field.
func SecurityGroupContains(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSecurityGroup), v))
	})
}

// SecurityGroupHasPrefix applies the HasPrefix predicate on the "security_group" field.
func SecurityGroupHasPrefix(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSecurityGroup), v))
	})
}

// SecurityGroupHasSuffix applies the HasSuffix predicate on the "security_group" field.
func SecurityGroupHasSuffix(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSecurityGroup), v))
	})
}

// SecurityGroupEqualFold applies the EqualFold predicate on the "security_group" field.
func SecurityGroupEqualFold(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSecurityGroup), v))
	})
}

// SecurityGroupContainsFold applies the ContainsFold predicate on the "security_group" field.
func SecurityGroupContainsFold(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSecurityGroup), v))
	})
}

// KeyPairEQ applies the EQ predicate on the "key_pair" field.
func KeyPairEQ(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKeyPair), v))
	})
}

// KeyPairNEQ applies the NEQ predicate on the "key_pair" field.
func KeyPairNEQ(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKeyPair), v))
	})
}

// KeyPairIn applies the In predicate on the "key_pair" field.
func KeyPairIn(vs ...string) predicate.Stack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKeyPair), v...))
	})
}

// KeyPairNotIn applies the NotIn predicate on the "key_pair" field.
func KeyPairNotIn(vs ...string) predicate.Stack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKeyPair), v...))
	})
}

// KeyPairGT applies the GT predicate on the "key_pair" field.
func KeyPairGT(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKeyPair), v))
	})
}

// KeyPairGTE applies the GTE predicate on the "key_pair" field.
func KeyPairGTE(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKeyPair), v))
	})
}

// KeyPairLT applies the LT predicate on the "key_pair" field.
func KeyPairLT(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKeyPair), v))
	})
}

// KeyPairLTE applies the LTE predicate on the "key_pair" field.
func KeyPairLTE(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKeyPair), v))
	})
}

// KeyPairContains applies the Contains predicate on the "key_pair" field.
func KeyPairContains(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKeyPair), v))
	})
}

// KeyPairHasPrefix applies the HasPrefix predicate on the "key_pair" field.
func KeyPairHasPrefix(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKeyPair), v))
	})
}

// KeyPairHasSuffix applies the HasSuffix predicate on the "key_pair" field.
func KeyPairHasSuffix(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKeyPair), v))
	})
}

// KeyPairEqualFold applies the EqualFold predicate on the "key_pair" field.
func KeyPairEqualFold(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKeyPair), v))
	})
}

// KeyPairContainsFold applies the ContainsFold predicate on the "key_pair" field.
func KeyPairContainsFold(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKeyPair), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Stack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Stack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// PrivateKeyEQ applies the EQ predicate on the "private_key" field.
func PrivateKeyEQ(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyNEQ applies the NEQ predicate on the "private_key" field.
func PrivateKeyNEQ(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyIn applies the In predicate on the "private_key" field.
func PrivateKeyIn(vs ...string) predicate.Stack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrivateKey), v...))
	})
}

// PrivateKeyNotIn applies the NotIn predicate on the "private_key" field.
func PrivateKeyNotIn(vs ...string) predicate.Stack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrivateKey), v...))
	})
}

// PrivateKeyGT applies the GT predicate on the "private_key" field.
func PrivateKeyGT(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyGTE applies the GTE predicate on the "private_key" field.
func PrivateKeyGTE(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyLT applies the LT predicate on the "private_key" field.
func PrivateKeyLT(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyLTE applies the LTE predicate on the "private_key" field.
func PrivateKeyLTE(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyContains applies the Contains predicate on the "private_key" field.
func PrivateKeyContains(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyHasPrefix applies the HasPrefix predicate on the "private_key" field.
func PrivateKeyHasPrefix(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyHasSuffix applies the HasSuffix predicate on the "private_key" field.
func PrivateKeyHasSuffix(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyEqualFold applies the EqualFold predicate on the "private_key" field.
func PrivateKeyEqualFold(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyContainsFold applies the ContainsFold predicate on the "private_key" field.
func PrivateKeyContainsFold(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPrivateKey), v))
	})
}

// FilepathEQ applies the EQ predicate on the "filepath" field.
func FilepathEQ(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilepath), v))
	})
}

// FilepathNEQ applies the NEQ predicate on the "filepath" field.
func FilepathNEQ(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFilepath), v))
	})
}

// FilepathIn applies the In predicate on the "filepath" field.
func FilepathIn(vs ...string) predicate.Stack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFilepath), v...))
	})
}

// FilepathNotIn applies the NotIn predicate on the "filepath" field.
func FilepathNotIn(vs ...string) predicate.Stack {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stack(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFilepath), v...))
	})
}

// FilepathGT applies the GT predicate on the "filepath" field.
func FilepathGT(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFilepath), v))
	})
}

// FilepathGTE applies the GTE predicate on the "filepath" field.
func FilepathGTE(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFilepath), v))
	})
}

// FilepathLT applies the LT predicate on the "filepath" field.
func FilepathLT(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFilepath), v))
	})
}

// FilepathLTE applies the LTE predicate on the "filepath" field.
func FilepathLTE(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFilepath), v))
	})
}

// FilepathContains applies the Contains predicate on the "filepath" field.
func FilepathContains(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFilepath), v))
	})
}

// FilepathHasPrefix applies the HasPrefix predicate on the "filepath" field.
func FilepathHasPrefix(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFilepath), v))
	})
}

// FilepathHasSuffix applies the HasSuffix predicate on the "filepath" field.
func FilepathHasSuffix(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFilepath), v))
	})
}

// FilepathIsNil applies the IsNil predicate on the "filepath" field.
func FilepathIsNil() predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFilepath)))
	})
}

// FilepathNotNil applies the NotNil predicate on the "filepath" field.
func FilepathNotNil() predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFilepath)))
	})
}

// FilepathEqualFold applies the EqualFold predicate on the "filepath" field.
func FilepathEqualFold(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFilepath), v))
	})
}

// FilepathContainsFold applies the ContainsFold predicate on the "filepath" field.
func FilepathContainsFold(v string) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFilepath), v))
	})
}

// HasDeployment applies the HasEdge predicate on the "deployment" edge.
func HasDeployment() predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DeploymentTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, DeploymentTable, DeploymentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeploymentWith applies the HasEdge predicate on the "deployment" edge with a given conditions (other predicates).
func HasDeploymentWith(preds ...predicate.Deployment) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DeploymentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, DeploymentTable, DeploymentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Stack) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Stack) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Stack) predicate.Stack {
	return predicate.Stack(func(s *sql.Selector) {
		p(s.Not())
	})
}
