// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/minskylab/meta-core/ent/deployment"
	"github.com/minskylab/meta-core/ent/task"
	uuid "github.com/satori/go.uuid"
)

// Task is the model entity for the Task schema.
type Task struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// Timeout holds the value of the "timeout" field.
	Timeout int `json:"timeout,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Cmd holds the value of the "cmd" field.
	Cmd string `json:"cmd,omitempty"`
	// Detached holds the value of the "detached" field.
	Detached bool `json:"detached,omitempty"`
	// Environment holds the value of the "environment" field.
	Environment map[string]interface{} `json:"environment,omitempty"`
	// Ports holds the value of the "ports" field.
	Ports []string `json:"ports,omitempty"`
	// Volumes holds the value of the "volumes" field.
	Volumes []string `json:"volumes,omitempty"`
	// Restart holds the value of the "restart" field.
	Restart string `json:"restart,omitempty"`
	// SecurityOpt holds the value of the "security_opt" field.
	SecurityOpt []string `json:"security_opt,omitempty"`
	// CapAdd holds the value of the "cap_add" field.
	CapAdd []string `json:"cap_add,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskQuery when eager-loading is set.
	Edges            TaskEdges `json:"edges"`
	deployment_tasks *uuid.UUID
	process_tasks    *string
}

// TaskEdges holds the relations/edges for other nodes in the graph.
type TaskEdges struct {
	// Deployment holds the value of the deployment edge.
	Deployment *Deployment `json:"deployment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DeploymentOrErr returns the Deployment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) DeploymentOrErr() (*Deployment, error) {
	if e.loadedTypes[0] {
		if e.Deployment == nil {
			// The edge deployment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: deployment.Label}
		}
		return e.Deployment, nil
	}
	return nil, &NotLoadedError{edge: "deployment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Task) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case task.FieldEnvironment, task.FieldPorts, task.FieldVolumes, task.FieldSecurityOpt, task.FieldCapAdd:
			values[i] = new([]byte)
		case task.FieldDetached:
			values[i] = new(sql.NullBool)
		case task.FieldTimeout:
			values[i] = new(sql.NullInt64)
		case task.FieldImage, task.FieldName, task.FieldCmd, task.FieldRestart:
			values[i] = new(sql.NullString)
		case task.FieldCreatedAt, task.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case task.FieldID:
			values[i] = new(uuid.UUID)
		case task.ForeignKeys[0]: // deployment_tasks
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case task.ForeignKeys[1]: // process_tasks
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Task", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Task fields.
func (t *Task) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case task.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case task.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case task.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case task.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				t.Image = value.String
			}
		case task.FieldTimeout:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timeout", values[i])
			} else if value.Valid {
				t.Timeout = int(value.Int64)
			}
		case task.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case task.FieldCmd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cmd", values[i])
			} else if value.Valid {
				t.Cmd = value.String
			}
		case task.FieldDetached:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field detached", values[i])
			} else if value.Valid {
				t.Detached = value.Bool
			}
		case task.FieldEnvironment:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field environment", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Environment); err != nil {
					return fmt.Errorf("unmarshal field environment: %w", err)
				}
			}
		case task.FieldPorts:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ports", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Ports); err != nil {
					return fmt.Errorf("unmarshal field ports: %w", err)
				}
			}
		case task.FieldVolumes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field volumes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Volumes); err != nil {
					return fmt.Errorf("unmarshal field volumes: %w", err)
				}
			}
		case task.FieldRestart:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field restart", values[i])
			} else if value.Valid {
				t.Restart = value.String
			}
		case task.FieldSecurityOpt:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field security_opt", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.SecurityOpt); err != nil {
					return fmt.Errorf("unmarshal field security_opt: %w", err)
				}
			}
		case task.FieldCapAdd:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field cap_add", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.CapAdd); err != nil {
					return fmt.Errorf("unmarshal field cap_add: %w", err)
				}
			}
		case task.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_tasks", values[i])
			} else if value.Valid {
				t.deployment_tasks = new(uuid.UUID)
				*t.deployment_tasks = *value.S.(*uuid.UUID)
			}
		case task.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_tasks", values[i])
			} else if value.Valid {
				t.process_tasks = new(string)
				*t.process_tasks = value.String
			}
		}
	}
	return nil
}

// QueryDeployment queries the "deployment" edge of the Task entity.
func (t *Task) QueryDeployment() *DeploymentQuery {
	return (&TaskClient{config: t.config}).QueryDeployment(t)
}

// Update returns a builder for updating this Task.
// Note that you need to call Task.Unwrap() before calling this method if this Task
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Task) Update() *TaskUpdateOne {
	return (&TaskClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Task entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Task) Unwrap() *Task {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Task is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Task) String() string {
	var builder strings.Builder
	builder.WriteString("Task(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", image=")
	builder.WriteString(t.Image)
	builder.WriteString(", timeout=")
	builder.WriteString(fmt.Sprintf("%v", t.Timeout))
	builder.WriteString(", name=")
	builder.WriteString(t.Name)
	builder.WriteString(", cmd=")
	builder.WriteString(t.Cmd)
	builder.WriteString(", detached=")
	builder.WriteString(fmt.Sprintf("%v", t.Detached))
	builder.WriteString(", environment=")
	builder.WriteString(fmt.Sprintf("%v", t.Environment))
	builder.WriteString(", ports=")
	builder.WriteString(fmt.Sprintf("%v", t.Ports))
	builder.WriteString(", volumes=")
	builder.WriteString(fmt.Sprintf("%v", t.Volumes))
	builder.WriteString(", restart=")
	builder.WriteString(t.Restart)
	builder.WriteString(", security_opt=")
	builder.WriteString(fmt.Sprintf("%v", t.SecurityOpt))
	builder.WriteString(", cap_add=")
	builder.WriteString(fmt.Sprintf("%v", t.CapAdd))
	builder.WriteByte(')')
	return builder.String()
}

// Tasks is a parsable slice of Task.
type Tasks []*Task

func (t Tasks) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
