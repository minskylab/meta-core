// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/minskylab/meta-core/ent/process"

	"github.com/minskylab/meta-core/ent/credential"
	"github.com/minskylab/meta-core/ent/stack"
	"github.com/minskylab/meta-core/ent/task"
	uuid "github.com/satori/go.uuid"
)

// ProcessCreate is the builder for creating a Process entity.
type ProcessCreate struct {
	config
	mutation *ProcessMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProcessCreate) SetCreatedAt(t time.Time) *ProcessCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableCreatedAt(t *time.Time) *ProcessCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProcessCreate) SetUpdatedAt(t time.Time) *ProcessCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableUpdatedAt(t *time.Time) *ProcessCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *ProcessCreate) SetName(s string) *ProcessCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableName(s *string) *ProcessCreate {
	if s != nil {
		pc.SetName(*s)
	}
	return pc
}

// SetToken sets the "token" field.
func (pc *ProcessCreate) SetToken(s string) *ProcessCreate {
	pc.mutation.SetToken(s)
	return pc
}

// SetInstanceType sets the "instance_type" field.
func (pc *ProcessCreate) SetInstanceType(s string) *ProcessCreate {
	pc.mutation.SetInstanceType(s)
	return pc
}

// SetAmiID sets the "ami_id" field.
func (pc *ProcessCreate) SetAmiID(s string) *ProcessCreate {
	pc.mutation.SetAmiID(s)
	return pc
}

// SetResourcePrefix sets the "resource_prefix" field.
func (pc *ProcessCreate) SetResourcePrefix(s string) *ProcessCreate {
	pc.mutation.SetResourcePrefix(s)
	return pc
}

// SetTimeout sets the "timeout" field.
func (pc *ProcessCreate) SetTimeout(i int) *ProcessCreate {
	pc.mutation.SetTimeout(i)
	return pc
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableTimeout(i *int) *ProcessCreate {
	if i != nil {
		pc.SetTimeout(*i)
	}
	return pc
}

// SetExpiration sets the "expiration" field.
func (pc *ProcessCreate) SetExpiration(i int) *ProcessCreate {
	pc.mutation.SetExpiration(i)
	return pc
}

// SetState sets the "state" field.
func (pc *ProcessCreate) SetState(pr process.State) *ProcessCreate {
	pc.mutation.SetState(pr)
	return pc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (pc *ProcessCreate) SetNillableState(pr *process.State) *ProcessCreate {
	if pr != nil {
		pc.SetState(*pr)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProcessCreate) SetID(s string) *ProcessCreate {
	pc.mutation.SetID(s)
	return pc
}

// SetStackID sets the "stack" edge to the Stack entity by ID.
func (pc *ProcessCreate) SetStackID(id string) *ProcessCreate {
	pc.mutation.SetStackID(id)
	return pc
}

// SetNillableStackID sets the "stack" edge to the Stack entity by ID if the given value is not nil.
func (pc *ProcessCreate) SetNillableStackID(id *string) *ProcessCreate {
	if id != nil {
		pc = pc.SetStackID(*id)
	}
	return pc
}

// SetStack sets the "stack" edge to the Stack entity.
func (pc *ProcessCreate) SetStack(s *Stack) *ProcessCreate {
	return pc.SetStackID(s.ID)
}

// AddCredentialIDs adds the "credentials" edge to the Credential entity by IDs.
func (pc *ProcessCreate) AddCredentialIDs(ids ...uuid.UUID) *ProcessCreate {
	pc.mutation.AddCredentialIDs(ids...)
	return pc
}

// AddCredentials adds the "credentials" edges to the Credential entity.
func (pc *ProcessCreate) AddCredentials(c ...*Credential) *ProcessCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddCredentialIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (pc *ProcessCreate) AddTaskIDs(ids ...uuid.UUID) *ProcessCreate {
	pc.mutation.AddTaskIDs(ids...)
	return pc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (pc *ProcessCreate) AddTasks(t ...*Task) *ProcessCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pc.AddTaskIDs(ids...)
}

// Mutation returns the ProcessMutation object of the builder.
func (pc *ProcessCreate) Mutation() *ProcessMutation {
	return pc.mutation
}

// Save creates the Process in the database.
func (pc *ProcessCreate) Save(ctx context.Context) (*Process, error) {
	var (
		err  error
		node *Process
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcessMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProcessCreate) SaveX(ctx context.Context) *Process {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProcessCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProcessCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProcessCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := process.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := process.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.State(); !ok {
		v := process.DefaultState
		pc.mutation.SetState(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProcessCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := pc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "token"`)}
	}
	if _, ok := pc.mutation.InstanceType(); !ok {
		return &ValidationError{Name: "instance_type", err: errors.New(`ent: missing required field "instance_type"`)}
	}
	if _, ok := pc.mutation.AmiID(); !ok {
		return &ValidationError{Name: "ami_id", err: errors.New(`ent: missing required field "ami_id"`)}
	}
	if _, ok := pc.mutation.ResourcePrefix(); !ok {
		return &ValidationError{Name: "resource_prefix", err: errors.New(`ent: missing required field "resource_prefix"`)}
	}
	if v, ok := pc.mutation.Timeout(); ok {
		if err := process.TimeoutValidator(v); err != nil {
			return &ValidationError{Name: "timeout", err: fmt.Errorf(`ent: validator failed for field "timeout": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Expiration(); !ok {
		return &ValidationError{Name: "expiration", err: errors.New(`ent: missing required field "expiration"`)}
	}
	if v, ok := pc.mutation.Expiration(); ok {
		if err := process.ExpirationValidator(v); err != nil {
			return &ValidationError{Name: "expiration", err: fmt.Errorf(`ent: validator failed for field "expiration": %w`, err)}
		}
	}
	if _, ok := pc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "state"`)}
	}
	if v, ok := pc.mutation.State(); ok {
		if err := process.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "state": %w`, err)}
		}
	}
	return nil
}

func (pc *ProcessCreate) sqlSave(ctx context.Context) (*Process, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(string)
	}
	return _node, nil
}

func (pc *ProcessCreate) createSpec() (*Process, *sqlgraph.CreateSpec) {
	var (
		_node = &Process{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: process.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: process.FieldID,
			},
		}
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: process.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: process.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: process.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pc.mutation.Token(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: process.FieldToken,
		})
		_node.Token = value
	}
	if value, ok := pc.mutation.InstanceType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: process.FieldInstanceType,
		})
		_node.InstanceType = value
	}
	if value, ok := pc.mutation.AmiID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: process.FieldAmiID,
		})
		_node.AmiID = value
	}
	if value, ok := pc.mutation.ResourcePrefix(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: process.FieldResourcePrefix,
		})
		_node.ResourcePrefix = value
	}
	if value, ok := pc.mutation.Timeout(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: process.FieldTimeout,
		})
		_node.Timeout = value
	}
	if value, ok := pc.mutation.Expiration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: process.FieldExpiration,
		})
		_node.Expiration = value
	}
	if value, ok := pc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: process.FieldState,
		})
		_node.State = value
	}
	if nodes := pc.mutation.StackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   process.StackTable,
			Columns: []string{process.StackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: stack.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.process_stack = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CredentialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   process.CredentialsTable,
			Columns: []string{process.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: credential.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   process.TasksTable,
			Columns: []string{process.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProcessCreateBulk is the builder for creating many Process entities in bulk.
type ProcessCreateBulk struct {
	config
	builders []*ProcessCreate
}

// Save creates the Process entities in the database.
func (pcb *ProcessCreateBulk) Save(ctx context.Context) ([]*Process, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Process, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcessMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProcessCreateBulk) SaveX(ctx context.Context) []*Process {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProcessCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProcessCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
