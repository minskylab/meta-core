// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/minskylab/meta-core/ent/deployment"
	"github.com/minskylab/meta-core/ent/predicate"
	"github.com/minskylab/meta-core/ent/task"
	uuid "github.com/satori/go.uuid"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TaskUpdate) SetCreatedAt(t time.Time) *TaskUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCreatedAt(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TaskUpdate) SetUpdatedAt(t time.Time) *TaskUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetImage sets the "image" field.
func (tu *TaskUpdate) SetImage(s string) *TaskUpdate {
	tu.mutation.SetImage(s)
	return tu
}

// SetTimeout sets the "timeout" field.
func (tu *TaskUpdate) SetTimeout(i int) *TaskUpdate {
	tu.mutation.ResetTimeout()
	tu.mutation.SetTimeout(i)
	return tu
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTimeout(i *int) *TaskUpdate {
	if i != nil {
		tu.SetTimeout(*i)
	}
	return tu
}

// AddTimeout adds i to the "timeout" field.
func (tu *TaskUpdate) AddTimeout(i int) *TaskUpdate {
	tu.mutation.AddTimeout(i)
	return tu
}

// ClearTimeout clears the value of the "timeout" field.
func (tu *TaskUpdate) ClearTimeout() *TaskUpdate {
	tu.mutation.ClearTimeout()
	return tu
}

// SetName sets the "name" field.
func (tu *TaskUpdate) SetName(s string) *TaskUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableName(s *string) *TaskUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// ClearName clears the value of the "name" field.
func (tu *TaskUpdate) ClearName() *TaskUpdate {
	tu.mutation.ClearName()
	return tu
}

// SetCmd sets the "cmd" field.
func (tu *TaskUpdate) SetCmd(s string) *TaskUpdate {
	tu.mutation.SetCmd(s)
	return tu
}

// SetNillableCmd sets the "cmd" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCmd(s *string) *TaskUpdate {
	if s != nil {
		tu.SetCmd(*s)
	}
	return tu
}

// ClearCmd clears the value of the "cmd" field.
func (tu *TaskUpdate) ClearCmd() *TaskUpdate {
	tu.mutation.ClearCmd()
	return tu
}

// SetDetached sets the "detached" field.
func (tu *TaskUpdate) SetDetached(b bool) *TaskUpdate {
	tu.mutation.SetDetached(b)
	return tu
}

// SetNillableDetached sets the "detached" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDetached(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetDetached(*b)
	}
	return tu
}

// ClearDetached clears the value of the "detached" field.
func (tu *TaskUpdate) ClearDetached() *TaskUpdate {
	tu.mutation.ClearDetached()
	return tu
}

// SetEnvironment sets the "environment" field.
func (tu *TaskUpdate) SetEnvironment(m map[string]interface{}) *TaskUpdate {
	tu.mutation.SetEnvironment(m)
	return tu
}

// ClearEnvironment clears the value of the "environment" field.
func (tu *TaskUpdate) ClearEnvironment() *TaskUpdate {
	tu.mutation.ClearEnvironment()
	return tu
}

// SetPorts sets the "ports" field.
func (tu *TaskUpdate) SetPorts(s []string) *TaskUpdate {
	tu.mutation.SetPorts(s)
	return tu
}

// ClearPorts clears the value of the "ports" field.
func (tu *TaskUpdate) ClearPorts() *TaskUpdate {
	tu.mutation.ClearPorts()
	return tu
}

// SetVolumes sets the "volumes" field.
func (tu *TaskUpdate) SetVolumes(s []string) *TaskUpdate {
	tu.mutation.SetVolumes(s)
	return tu
}

// ClearVolumes clears the value of the "volumes" field.
func (tu *TaskUpdate) ClearVolumes() *TaskUpdate {
	tu.mutation.ClearVolumes()
	return tu
}

// SetRestart sets the "restart" field.
func (tu *TaskUpdate) SetRestart(s string) *TaskUpdate {
	tu.mutation.SetRestart(s)
	return tu
}

// SetNillableRestart sets the "restart" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableRestart(s *string) *TaskUpdate {
	if s != nil {
		tu.SetRestart(*s)
	}
	return tu
}

// ClearRestart clears the value of the "restart" field.
func (tu *TaskUpdate) ClearRestart() *TaskUpdate {
	tu.mutation.ClearRestart()
	return tu
}

// SetSecurityOpt sets the "security_opt" field.
func (tu *TaskUpdate) SetSecurityOpt(s []string) *TaskUpdate {
	tu.mutation.SetSecurityOpt(s)
	return tu
}

// ClearSecurityOpt clears the value of the "security_opt" field.
func (tu *TaskUpdate) ClearSecurityOpt() *TaskUpdate {
	tu.mutation.ClearSecurityOpt()
	return tu
}

// SetCapAdd sets the "cap_add" field.
func (tu *TaskUpdate) SetCapAdd(s []string) *TaskUpdate {
	tu.mutation.SetCapAdd(s)
	return tu
}

// ClearCapAdd clears the value of the "cap_add" field.
func (tu *TaskUpdate) ClearCapAdd() *TaskUpdate {
	tu.mutation.ClearCapAdd()
	return tu
}

// SetDeploymentID sets the "deployment" edge to the Deployment entity by ID.
func (tu *TaskUpdate) SetDeploymentID(id uuid.UUID) *TaskUpdate {
	tu.mutation.SetDeploymentID(id)
	return tu
}

// SetNillableDeploymentID sets the "deployment" edge to the Deployment entity by ID if the given value is not nil.
func (tu *TaskUpdate) SetNillableDeploymentID(id *uuid.UUID) *TaskUpdate {
	if id != nil {
		tu = tu.SetDeploymentID(*id)
	}
	return tu
}

// SetDeployment sets the "deployment" edge to the Deployment entity.
func (tu *TaskUpdate) SetDeployment(d *Deployment) *TaskUpdate {
	return tu.SetDeploymentID(d.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearDeployment clears the "deployment" edge to the Deployment entity.
func (tu *TaskUpdate) ClearDeployment() *TaskUpdate {
	tu.mutation.ClearDeployment()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tu.defaults()
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TaskUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := task.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   task.Table,
			Columns: task.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: task.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldCreatedAt,
		})
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldUpdatedAt,
		})
	}
	if value, ok := tu.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldImage,
		})
	}
	if value, ok := tu.mutation.Timeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: task.FieldTimeout,
		})
	}
	if value, ok := tu.mutation.AddedTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: task.FieldTimeout,
		})
	}
	if tu.mutation.TimeoutCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: task.FieldTimeout,
		})
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldName,
		})
	}
	if tu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldName,
		})
	}
	if value, ok := tu.mutation.Cmd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldCmd,
		})
	}
	if tu.mutation.CmdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldCmd,
		})
	}
	if value, ok := tu.mutation.Detached(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: task.FieldDetached,
		})
	}
	if tu.mutation.DetachedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: task.FieldDetached,
		})
	}
	if value, ok := tu.mutation.Environment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: task.FieldEnvironment,
		})
	}
	if tu.mutation.EnvironmentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: task.FieldEnvironment,
		})
	}
	if value, ok := tu.mutation.Ports(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: task.FieldPorts,
		})
	}
	if tu.mutation.PortsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: task.FieldPorts,
		})
	}
	if value, ok := tu.mutation.Volumes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: task.FieldVolumes,
		})
	}
	if tu.mutation.VolumesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: task.FieldVolumes,
		})
	}
	if value, ok := tu.mutation.Restart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldRestart,
		})
	}
	if tu.mutation.RestartCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldRestart,
		})
	}
	if value, ok := tu.mutation.SecurityOpt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: task.FieldSecurityOpt,
		})
	}
	if tu.mutation.SecurityOptCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: task.FieldSecurityOpt,
		})
	}
	if value, ok := tu.mutation.CapAdd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: task.FieldCapAdd,
		})
	}
	if tu.mutation.CapAddCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: task.FieldCapAdd,
		})
	}
	if tu.mutation.DeploymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.DeploymentTable,
			Columns: []string{task.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deployment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.DeploymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.DeploymentTable,
			Columns: []string{task.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deployment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TaskUpdateOne) SetCreatedAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCreatedAt(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TaskUpdateOne) SetUpdatedAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetImage sets the "image" field.
func (tuo *TaskUpdateOne) SetImage(s string) *TaskUpdateOne {
	tuo.mutation.SetImage(s)
	return tuo
}

// SetTimeout sets the "timeout" field.
func (tuo *TaskUpdateOne) SetTimeout(i int) *TaskUpdateOne {
	tuo.mutation.ResetTimeout()
	tuo.mutation.SetTimeout(i)
	return tuo
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTimeout(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetTimeout(*i)
	}
	return tuo
}

// AddTimeout adds i to the "timeout" field.
func (tuo *TaskUpdateOne) AddTimeout(i int) *TaskUpdateOne {
	tuo.mutation.AddTimeout(i)
	return tuo
}

// ClearTimeout clears the value of the "timeout" field.
func (tuo *TaskUpdateOne) ClearTimeout() *TaskUpdateOne {
	tuo.mutation.ClearTimeout()
	return tuo
}

// SetName sets the "name" field.
func (tuo *TaskUpdateOne) SetName(s string) *TaskUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableName(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// ClearName clears the value of the "name" field.
func (tuo *TaskUpdateOne) ClearName() *TaskUpdateOne {
	tuo.mutation.ClearName()
	return tuo
}

// SetCmd sets the "cmd" field.
func (tuo *TaskUpdateOne) SetCmd(s string) *TaskUpdateOne {
	tuo.mutation.SetCmd(s)
	return tuo
}

// SetNillableCmd sets the "cmd" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCmd(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetCmd(*s)
	}
	return tuo
}

// ClearCmd clears the value of the "cmd" field.
func (tuo *TaskUpdateOne) ClearCmd() *TaskUpdateOne {
	tuo.mutation.ClearCmd()
	return tuo
}

// SetDetached sets the "detached" field.
func (tuo *TaskUpdateOne) SetDetached(b bool) *TaskUpdateOne {
	tuo.mutation.SetDetached(b)
	return tuo
}

// SetNillableDetached sets the "detached" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDetached(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetDetached(*b)
	}
	return tuo
}

// ClearDetached clears the value of the "detached" field.
func (tuo *TaskUpdateOne) ClearDetached() *TaskUpdateOne {
	tuo.mutation.ClearDetached()
	return tuo
}

// SetEnvironment sets the "environment" field.
func (tuo *TaskUpdateOne) SetEnvironment(m map[string]interface{}) *TaskUpdateOne {
	tuo.mutation.SetEnvironment(m)
	return tuo
}

// ClearEnvironment clears the value of the "environment" field.
func (tuo *TaskUpdateOne) ClearEnvironment() *TaskUpdateOne {
	tuo.mutation.ClearEnvironment()
	return tuo
}

// SetPorts sets the "ports" field.
func (tuo *TaskUpdateOne) SetPorts(s []string) *TaskUpdateOne {
	tuo.mutation.SetPorts(s)
	return tuo
}

// ClearPorts clears the value of the "ports" field.
func (tuo *TaskUpdateOne) ClearPorts() *TaskUpdateOne {
	tuo.mutation.ClearPorts()
	return tuo
}

// SetVolumes sets the "volumes" field.
func (tuo *TaskUpdateOne) SetVolumes(s []string) *TaskUpdateOne {
	tuo.mutation.SetVolumes(s)
	return tuo
}

// ClearVolumes clears the value of the "volumes" field.
func (tuo *TaskUpdateOne) ClearVolumes() *TaskUpdateOne {
	tuo.mutation.ClearVolumes()
	return tuo
}

// SetRestart sets the "restart" field.
func (tuo *TaskUpdateOne) SetRestart(s string) *TaskUpdateOne {
	tuo.mutation.SetRestart(s)
	return tuo
}

// SetNillableRestart sets the "restart" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableRestart(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetRestart(*s)
	}
	return tuo
}

// ClearRestart clears the value of the "restart" field.
func (tuo *TaskUpdateOne) ClearRestart() *TaskUpdateOne {
	tuo.mutation.ClearRestart()
	return tuo
}

// SetSecurityOpt sets the "security_opt" field.
func (tuo *TaskUpdateOne) SetSecurityOpt(s []string) *TaskUpdateOne {
	tuo.mutation.SetSecurityOpt(s)
	return tuo
}

// ClearSecurityOpt clears the value of the "security_opt" field.
func (tuo *TaskUpdateOne) ClearSecurityOpt() *TaskUpdateOne {
	tuo.mutation.ClearSecurityOpt()
	return tuo
}

// SetCapAdd sets the "cap_add" field.
func (tuo *TaskUpdateOne) SetCapAdd(s []string) *TaskUpdateOne {
	tuo.mutation.SetCapAdd(s)
	return tuo
}

// ClearCapAdd clears the value of the "cap_add" field.
func (tuo *TaskUpdateOne) ClearCapAdd() *TaskUpdateOne {
	tuo.mutation.ClearCapAdd()
	return tuo
}

// SetDeploymentID sets the "deployment" edge to the Deployment entity by ID.
func (tuo *TaskUpdateOne) SetDeploymentID(id uuid.UUID) *TaskUpdateOne {
	tuo.mutation.SetDeploymentID(id)
	return tuo
}

// SetNillableDeploymentID sets the "deployment" edge to the Deployment entity by ID if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDeploymentID(id *uuid.UUID) *TaskUpdateOne {
	if id != nil {
		tuo = tuo.SetDeploymentID(*id)
	}
	return tuo
}

// SetDeployment sets the "deployment" edge to the Deployment entity.
func (tuo *TaskUpdateOne) SetDeployment(d *Deployment) *TaskUpdateOne {
	return tuo.SetDeploymentID(d.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearDeployment clears the "deployment" edge to the Deployment entity.
func (tuo *TaskUpdateOne) ClearDeployment() *TaskUpdateOne {
	tuo.mutation.ClearDeployment()
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	var (
		err  error
		node *Task
	)
	tuo.defaults()
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TaskUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := task.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   task.Table,
			Columns: task.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: task.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Task.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldCreatedAt,
		})
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldUpdatedAt,
		})
	}
	if value, ok := tuo.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldImage,
		})
	}
	if value, ok := tuo.mutation.Timeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: task.FieldTimeout,
		})
	}
	if value, ok := tuo.mutation.AddedTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: task.FieldTimeout,
		})
	}
	if tuo.mutation.TimeoutCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: task.FieldTimeout,
		})
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldName,
		})
	}
	if tuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldName,
		})
	}
	if value, ok := tuo.mutation.Cmd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldCmd,
		})
	}
	if tuo.mutation.CmdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldCmd,
		})
	}
	if value, ok := tuo.mutation.Detached(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: task.FieldDetached,
		})
	}
	if tuo.mutation.DetachedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: task.FieldDetached,
		})
	}
	if value, ok := tuo.mutation.Environment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: task.FieldEnvironment,
		})
	}
	if tuo.mutation.EnvironmentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: task.FieldEnvironment,
		})
	}
	if value, ok := tuo.mutation.Ports(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: task.FieldPorts,
		})
	}
	if tuo.mutation.PortsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: task.FieldPorts,
		})
	}
	if value, ok := tuo.mutation.Volumes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: task.FieldVolumes,
		})
	}
	if tuo.mutation.VolumesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: task.FieldVolumes,
		})
	}
	if value, ok := tuo.mutation.Restart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldRestart,
		})
	}
	if tuo.mutation.RestartCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldRestart,
		})
	}
	if value, ok := tuo.mutation.SecurityOpt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: task.FieldSecurityOpt,
		})
	}
	if tuo.mutation.SecurityOptCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: task.FieldSecurityOpt,
		})
	}
	if value, ok := tuo.mutation.CapAdd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: task.FieldCapAdd,
		})
	}
	if tuo.mutation.CapAddCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: task.FieldCapAdd,
		})
	}
	if tuo.mutation.DeploymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.DeploymentTable,
			Columns: []string{task.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deployment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.DeploymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.DeploymentTable,
			Columns: []string{task.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deployment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
