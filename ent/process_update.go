// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/minskylab/meta-core/ent/credential"
	"github.com/minskylab/meta-core/ent/predicate"
	"github.com/minskylab/meta-core/ent/process"
	"github.com/minskylab/meta-core/ent/stack"
	"github.com/minskylab/meta-core/ent/task"
	uuid "github.com/satori/go.uuid"
)

// ProcessUpdate is the builder for updating Process entities.
type ProcessUpdate struct {
	config
	hooks    []Hook
	mutation *ProcessMutation
}

// Where appends a list predicates to the ProcessUpdate builder.
func (pu *ProcessUpdate) Where(ps ...predicate.Process) *ProcessUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *ProcessUpdate) SetCreatedAt(t time.Time) *ProcessUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableCreatedAt(t *time.Time) *ProcessUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProcessUpdate) SetUpdatedAt(t time.Time) *ProcessUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetName sets the "name" field.
func (pu *ProcessUpdate) SetName(s string) *ProcessUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableName(s *string) *ProcessUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// ClearName clears the value of the "name" field.
func (pu *ProcessUpdate) ClearName() *ProcessUpdate {
	pu.mutation.ClearName()
	return pu
}

// SetToken sets the "token" field.
func (pu *ProcessUpdate) SetToken(s string) *ProcessUpdate {
	pu.mutation.SetToken(s)
	return pu
}

// SetInstanceType sets the "instance_type" field.
func (pu *ProcessUpdate) SetInstanceType(s string) *ProcessUpdate {
	pu.mutation.SetInstanceType(s)
	return pu
}

// SetAmiID sets the "ami_id" field.
func (pu *ProcessUpdate) SetAmiID(s string) *ProcessUpdate {
	pu.mutation.SetAmiID(s)
	return pu
}

// SetResourcePrefix sets the "resource_prefix" field.
func (pu *ProcessUpdate) SetResourcePrefix(s string) *ProcessUpdate {
	pu.mutation.SetResourcePrefix(s)
	return pu
}

// SetTimeout sets the "timeout" field.
func (pu *ProcessUpdate) SetTimeout(i int) *ProcessUpdate {
	pu.mutation.ResetTimeout()
	pu.mutation.SetTimeout(i)
	return pu
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableTimeout(i *int) *ProcessUpdate {
	if i != nil {
		pu.SetTimeout(*i)
	}
	return pu
}

// AddTimeout adds i to the "timeout" field.
func (pu *ProcessUpdate) AddTimeout(i int) *ProcessUpdate {
	pu.mutation.AddTimeout(i)
	return pu
}

// ClearTimeout clears the value of the "timeout" field.
func (pu *ProcessUpdate) ClearTimeout() *ProcessUpdate {
	pu.mutation.ClearTimeout()
	return pu
}

// SetExpiration sets the "expiration" field.
func (pu *ProcessUpdate) SetExpiration(i int) *ProcessUpdate {
	pu.mutation.ResetExpiration()
	pu.mutation.SetExpiration(i)
	return pu
}

// AddExpiration adds i to the "expiration" field.
func (pu *ProcessUpdate) AddExpiration(i int) *ProcessUpdate {
	pu.mutation.AddExpiration(i)
	return pu
}

// SetState sets the "state" field.
func (pu *ProcessUpdate) SetState(pr process.State) *ProcessUpdate {
	pu.mutation.SetState(pr)
	return pu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (pu *ProcessUpdate) SetNillableState(pr *process.State) *ProcessUpdate {
	if pr != nil {
		pu.SetState(*pr)
	}
	return pu
}

// SetStackID sets the "stack" edge to the Stack entity by ID.
func (pu *ProcessUpdate) SetStackID(id string) *ProcessUpdate {
	pu.mutation.SetStackID(id)
	return pu
}

// SetNillableStackID sets the "stack" edge to the Stack entity by ID if the given value is not nil.
func (pu *ProcessUpdate) SetNillableStackID(id *string) *ProcessUpdate {
	if id != nil {
		pu = pu.SetStackID(*id)
	}
	return pu
}

// SetStack sets the "stack" edge to the Stack entity.
func (pu *ProcessUpdate) SetStack(s *Stack) *ProcessUpdate {
	return pu.SetStackID(s.ID)
}

// AddCredentialIDs adds the "credentials" edge to the Credential entity by IDs.
func (pu *ProcessUpdate) AddCredentialIDs(ids ...uuid.UUID) *ProcessUpdate {
	pu.mutation.AddCredentialIDs(ids...)
	return pu
}

// AddCredentials adds the "credentials" edges to the Credential entity.
func (pu *ProcessUpdate) AddCredentials(c ...*Credential) *ProcessUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCredentialIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (pu *ProcessUpdate) AddTaskIDs(ids ...uuid.UUID) *ProcessUpdate {
	pu.mutation.AddTaskIDs(ids...)
	return pu
}

// AddTasks adds the "tasks" edges to the Task entity.
func (pu *ProcessUpdate) AddTasks(t ...*Task) *ProcessUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddTaskIDs(ids...)
}

// Mutation returns the ProcessMutation object of the builder.
func (pu *ProcessUpdate) Mutation() *ProcessMutation {
	return pu.mutation
}

// ClearStack clears the "stack" edge to the Stack entity.
func (pu *ProcessUpdate) ClearStack() *ProcessUpdate {
	pu.mutation.ClearStack()
	return pu
}

// ClearCredentials clears all "credentials" edges to the Credential entity.
func (pu *ProcessUpdate) ClearCredentials() *ProcessUpdate {
	pu.mutation.ClearCredentials()
	return pu
}

// RemoveCredentialIDs removes the "credentials" edge to Credential entities by IDs.
func (pu *ProcessUpdate) RemoveCredentialIDs(ids ...uuid.UUID) *ProcessUpdate {
	pu.mutation.RemoveCredentialIDs(ids...)
	return pu
}

// RemoveCredentials removes "credentials" edges to Credential entities.
func (pu *ProcessUpdate) RemoveCredentials(c ...*Credential) *ProcessUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCredentialIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (pu *ProcessUpdate) ClearTasks() *ProcessUpdate {
	pu.mutation.ClearTasks()
	return pu
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (pu *ProcessUpdate) RemoveTaskIDs(ids ...uuid.UUID) *ProcessUpdate {
	pu.mutation.RemoveTaskIDs(ids...)
	return pu
}

// RemoveTasks removes "tasks" edges to Task entities.
func (pu *ProcessUpdate) RemoveTasks(t ...*Task) *ProcessUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProcessUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcessMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProcessUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProcessUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProcessUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProcessUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := process.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProcessUpdate) check() error {
	if v, ok := pu.mutation.Timeout(); ok {
		if err := process.TimeoutValidator(v); err != nil {
			return &ValidationError{Name: "timeout", err: fmt.Errorf("ent: validator failed for field \"timeout\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Expiration(); ok {
		if err := process.ExpirationValidator(v); err != nil {
			return &ValidationError{Name: "expiration", err: fmt.Errorf("ent: validator failed for field \"expiration\": %w", err)}
		}
	}
	if v, ok := pu.mutation.State(); ok {
		if err := process.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf("ent: validator failed for field \"state\": %w", err)}
		}
	}
	return nil
}

func (pu *ProcessUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   process.Table,
			Columns: process.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: process.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: process.FieldCreatedAt,
		})
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: process.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: process.FieldName,
		})
	}
	if pu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: process.FieldName,
		})
	}
	if value, ok := pu.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: process.FieldToken,
		})
	}
	if value, ok := pu.mutation.InstanceType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: process.FieldInstanceType,
		})
	}
	if value, ok := pu.mutation.AmiID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: process.FieldAmiID,
		})
	}
	if value, ok := pu.mutation.ResourcePrefix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: process.FieldResourcePrefix,
		})
	}
	if value, ok := pu.mutation.Timeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: process.FieldTimeout,
		})
	}
	if value, ok := pu.mutation.AddedTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: process.FieldTimeout,
		})
	}
	if pu.mutation.TimeoutCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: process.FieldTimeout,
		})
	}
	if value, ok := pu.mutation.Expiration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: process.FieldExpiration,
		})
	}
	if value, ok := pu.mutation.AddedExpiration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: process.FieldExpiration,
		})
	}
	if value, ok := pu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: process.FieldState,
		})
	}
	if pu.mutation.StackCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   process.StackTable,
			Columns: []string{process.StackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: stack.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.StackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   process.StackTable,
			Columns: []string{process.StackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: stack.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   process.CredentialsTable,
			Columns: []string{process.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: credential.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCredentialsIDs(); len(nodes) > 0 && !pu.mutation.CredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   process.CredentialsTable,
			Columns: []string{process.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: credential.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CredentialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   process.CredentialsTable,
			Columns: []string{process.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: credential.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   process.TasksTable,
			Columns: []string{process.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedTasksIDs(); len(nodes) > 0 && !pu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   process.TasksTable,
			Columns: []string{process.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   process.TasksTable,
			Columns: []string{process.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{process.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProcessUpdateOne is the builder for updating a single Process entity.
type ProcessUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProcessMutation
}

// SetCreatedAt sets the "created_at" field.
func (puo *ProcessUpdateOne) SetCreatedAt(t time.Time) *ProcessUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableCreatedAt(t *time.Time) *ProcessUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProcessUpdateOne) SetUpdatedAt(t time.Time) *ProcessUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetName sets the "name" field.
func (puo *ProcessUpdateOne) SetName(s string) *ProcessUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableName(s *string) *ProcessUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// ClearName clears the value of the "name" field.
func (puo *ProcessUpdateOne) ClearName() *ProcessUpdateOne {
	puo.mutation.ClearName()
	return puo
}

// SetToken sets the "token" field.
func (puo *ProcessUpdateOne) SetToken(s string) *ProcessUpdateOne {
	puo.mutation.SetToken(s)
	return puo
}

// SetInstanceType sets the "instance_type" field.
func (puo *ProcessUpdateOne) SetInstanceType(s string) *ProcessUpdateOne {
	puo.mutation.SetInstanceType(s)
	return puo
}

// SetAmiID sets the "ami_id" field.
func (puo *ProcessUpdateOne) SetAmiID(s string) *ProcessUpdateOne {
	puo.mutation.SetAmiID(s)
	return puo
}

// SetResourcePrefix sets the "resource_prefix" field.
func (puo *ProcessUpdateOne) SetResourcePrefix(s string) *ProcessUpdateOne {
	puo.mutation.SetResourcePrefix(s)
	return puo
}

// SetTimeout sets the "timeout" field.
func (puo *ProcessUpdateOne) SetTimeout(i int) *ProcessUpdateOne {
	puo.mutation.ResetTimeout()
	puo.mutation.SetTimeout(i)
	return puo
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableTimeout(i *int) *ProcessUpdateOne {
	if i != nil {
		puo.SetTimeout(*i)
	}
	return puo
}

// AddTimeout adds i to the "timeout" field.
func (puo *ProcessUpdateOne) AddTimeout(i int) *ProcessUpdateOne {
	puo.mutation.AddTimeout(i)
	return puo
}

// ClearTimeout clears the value of the "timeout" field.
func (puo *ProcessUpdateOne) ClearTimeout() *ProcessUpdateOne {
	puo.mutation.ClearTimeout()
	return puo
}

// SetExpiration sets the "expiration" field.
func (puo *ProcessUpdateOne) SetExpiration(i int) *ProcessUpdateOne {
	puo.mutation.ResetExpiration()
	puo.mutation.SetExpiration(i)
	return puo
}

// AddExpiration adds i to the "expiration" field.
func (puo *ProcessUpdateOne) AddExpiration(i int) *ProcessUpdateOne {
	puo.mutation.AddExpiration(i)
	return puo
}

// SetState sets the "state" field.
func (puo *ProcessUpdateOne) SetState(pr process.State) *ProcessUpdateOne {
	puo.mutation.SetState(pr)
	return puo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableState(pr *process.State) *ProcessUpdateOne {
	if pr != nil {
		puo.SetState(*pr)
	}
	return puo
}

// SetStackID sets the "stack" edge to the Stack entity by ID.
func (puo *ProcessUpdateOne) SetStackID(id string) *ProcessUpdateOne {
	puo.mutation.SetStackID(id)
	return puo
}

// SetNillableStackID sets the "stack" edge to the Stack entity by ID if the given value is not nil.
func (puo *ProcessUpdateOne) SetNillableStackID(id *string) *ProcessUpdateOne {
	if id != nil {
		puo = puo.SetStackID(*id)
	}
	return puo
}

// SetStack sets the "stack" edge to the Stack entity.
func (puo *ProcessUpdateOne) SetStack(s *Stack) *ProcessUpdateOne {
	return puo.SetStackID(s.ID)
}

// AddCredentialIDs adds the "credentials" edge to the Credential entity by IDs.
func (puo *ProcessUpdateOne) AddCredentialIDs(ids ...uuid.UUID) *ProcessUpdateOne {
	puo.mutation.AddCredentialIDs(ids...)
	return puo
}

// AddCredentials adds the "credentials" edges to the Credential entity.
func (puo *ProcessUpdateOne) AddCredentials(c ...*Credential) *ProcessUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCredentialIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (puo *ProcessUpdateOne) AddTaskIDs(ids ...uuid.UUID) *ProcessUpdateOne {
	puo.mutation.AddTaskIDs(ids...)
	return puo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (puo *ProcessUpdateOne) AddTasks(t ...*Task) *ProcessUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddTaskIDs(ids...)
}

// Mutation returns the ProcessMutation object of the builder.
func (puo *ProcessUpdateOne) Mutation() *ProcessMutation {
	return puo.mutation
}

// ClearStack clears the "stack" edge to the Stack entity.
func (puo *ProcessUpdateOne) ClearStack() *ProcessUpdateOne {
	puo.mutation.ClearStack()
	return puo
}

// ClearCredentials clears all "credentials" edges to the Credential entity.
func (puo *ProcessUpdateOne) ClearCredentials() *ProcessUpdateOne {
	puo.mutation.ClearCredentials()
	return puo
}

// RemoveCredentialIDs removes the "credentials" edge to Credential entities by IDs.
func (puo *ProcessUpdateOne) RemoveCredentialIDs(ids ...uuid.UUID) *ProcessUpdateOne {
	puo.mutation.RemoveCredentialIDs(ids...)
	return puo
}

// RemoveCredentials removes "credentials" edges to Credential entities.
func (puo *ProcessUpdateOne) RemoveCredentials(c ...*Credential) *ProcessUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCredentialIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (puo *ProcessUpdateOne) ClearTasks() *ProcessUpdateOne {
	puo.mutation.ClearTasks()
	return puo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (puo *ProcessUpdateOne) RemoveTaskIDs(ids ...uuid.UUID) *ProcessUpdateOne {
	puo.mutation.RemoveTaskIDs(ids...)
	return puo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (puo *ProcessUpdateOne) RemoveTasks(t ...*Task) *ProcessUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveTaskIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProcessUpdateOne) Select(field string, fields ...string) *ProcessUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Process entity.
func (puo *ProcessUpdateOne) Save(ctx context.Context) (*Process, error) {
	var (
		err  error
		node *Process
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcessMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProcessUpdateOne) SaveX(ctx context.Context) *Process {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProcessUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProcessUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProcessUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := process.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProcessUpdateOne) check() error {
	if v, ok := puo.mutation.Timeout(); ok {
		if err := process.TimeoutValidator(v); err != nil {
			return &ValidationError{Name: "timeout", err: fmt.Errorf("ent: validator failed for field \"timeout\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Expiration(); ok {
		if err := process.ExpirationValidator(v); err != nil {
			return &ValidationError{Name: "expiration", err: fmt.Errorf("ent: validator failed for field \"expiration\": %w", err)}
		}
	}
	if v, ok := puo.mutation.State(); ok {
		if err := process.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf("ent: validator failed for field \"state\": %w", err)}
		}
	}
	return nil
}

func (puo *ProcessUpdateOne) sqlSave(ctx context.Context) (_node *Process, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   process.Table,
			Columns: process.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: process.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Process.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, process.FieldID)
		for _, f := range fields {
			if !process.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != process.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: process.FieldCreatedAt,
		})
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: process.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: process.FieldName,
		})
	}
	if puo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: process.FieldName,
		})
	}
	if value, ok := puo.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: process.FieldToken,
		})
	}
	if value, ok := puo.mutation.InstanceType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: process.FieldInstanceType,
		})
	}
	if value, ok := puo.mutation.AmiID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: process.FieldAmiID,
		})
	}
	if value, ok := puo.mutation.ResourcePrefix(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: process.FieldResourcePrefix,
		})
	}
	if value, ok := puo.mutation.Timeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: process.FieldTimeout,
		})
	}
	if value, ok := puo.mutation.AddedTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: process.FieldTimeout,
		})
	}
	if puo.mutation.TimeoutCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: process.FieldTimeout,
		})
	}
	if value, ok := puo.mutation.Expiration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: process.FieldExpiration,
		})
	}
	if value, ok := puo.mutation.AddedExpiration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: process.FieldExpiration,
		})
	}
	if value, ok := puo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: process.FieldState,
		})
	}
	if puo.mutation.StackCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   process.StackTable,
			Columns: []string{process.StackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: stack.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.StackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   process.StackTable,
			Columns: []string{process.StackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: stack.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   process.CredentialsTable,
			Columns: []string{process.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: credential.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCredentialsIDs(); len(nodes) > 0 && !puo.mutation.CredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   process.CredentialsTable,
			Columns: []string{process.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: credential.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CredentialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   process.CredentialsTable,
			Columns: []string{process.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: credential.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   process.TasksTable,
			Columns: []string{process.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !puo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   process.TasksTable,
			Columns: []string{process.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   process.TasksTable,
			Columns: []string{process.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Process{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{process.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
