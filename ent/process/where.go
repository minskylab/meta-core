// Code generated by entc, DO NOT EDIT.

package process

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/minskylab/meta-core/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldToken), v))
	})
}

// InstanceType applies equality check predicate on the "instance_type" field. It's identical to InstanceTypeEQ.
func InstanceType(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstanceType), v))
	})
}

// AmiID applies equality check predicate on the "ami_id" field. It's identical to AmiIDEQ.
func AmiID(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmiID), v))
	})
}

// ResourcePrefix applies equality check predicate on the "resource_prefix" field. It's identical to ResourcePrefixEQ.
func ResourcePrefix(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResourcePrefix), v))
	})
}

// Timeout applies equality check predicate on the "timeout" field. It's identical to TimeoutEQ.
func Timeout(v int) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeout), v))
	})
}

// Expiration applies equality check predicate on the "expiration" field. It's identical to ExpirationEQ.
func Expiration(v int) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiration), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Process {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Process(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Process {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Process(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Process {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Process(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Process {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Process(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Process {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Process(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Process {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Process(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldToken), v))
	})
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldToken), v))
	})
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.Process {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Process(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldToken), v...))
	})
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.Process {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Process(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldToken), v...))
	})
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldToken), v))
	})
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldToken), v))
	})
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldToken), v))
	})
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldToken), v))
	})
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldToken), v))
	})
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldToken), v))
	})
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldToken), v))
	})
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldToken), v))
	})
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldToken), v))
	})
}

// InstanceTypeEQ applies the EQ predicate on the "instance_type" field.
func InstanceTypeEQ(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeNEQ applies the NEQ predicate on the "instance_type" field.
func InstanceTypeNEQ(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeIn applies the In predicate on the "instance_type" field.
func InstanceTypeIn(vs ...string) predicate.Process {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Process(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInstanceType), v...))
	})
}

// InstanceTypeNotIn applies the NotIn predicate on the "instance_type" field.
func InstanceTypeNotIn(vs ...string) predicate.Process {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Process(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInstanceType), v...))
	})
}

// InstanceTypeGT applies the GT predicate on the "instance_type" field.
func InstanceTypeGT(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeGTE applies the GTE predicate on the "instance_type" field.
func InstanceTypeGTE(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeLT applies the LT predicate on the "instance_type" field.
func InstanceTypeLT(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeLTE applies the LTE predicate on the "instance_type" field.
func InstanceTypeLTE(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeContains applies the Contains predicate on the "instance_type" field.
func InstanceTypeContains(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeHasPrefix applies the HasPrefix predicate on the "instance_type" field.
func InstanceTypeHasPrefix(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeHasSuffix applies the HasSuffix predicate on the "instance_type" field.
func InstanceTypeHasSuffix(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeEqualFold applies the EqualFold predicate on the "instance_type" field.
func InstanceTypeEqualFold(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstanceType), v))
	})
}

// InstanceTypeContainsFold applies the ContainsFold predicate on the "instance_type" field.
func InstanceTypeContainsFold(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstanceType), v))
	})
}

// AmiIDEQ applies the EQ predicate on the "ami_id" field.
func AmiIDEQ(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmiID), v))
	})
}

// AmiIDNEQ applies the NEQ predicate on the "ami_id" field.
func AmiIDNEQ(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmiID), v))
	})
}

// AmiIDIn applies the In predicate on the "ami_id" field.
func AmiIDIn(vs ...string) predicate.Process {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Process(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAmiID), v...))
	})
}

// AmiIDNotIn applies the NotIn predicate on the "ami_id" field.
func AmiIDNotIn(vs ...string) predicate.Process {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Process(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAmiID), v...))
	})
}

// AmiIDGT applies the GT predicate on the "ami_id" field.
func AmiIDGT(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmiID), v))
	})
}

// AmiIDGTE applies the GTE predicate on the "ami_id" field.
func AmiIDGTE(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmiID), v))
	})
}

// AmiIDLT applies the LT predicate on the "ami_id" field.
func AmiIDLT(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmiID), v))
	})
}

// AmiIDLTE applies the LTE predicate on the "ami_id" field.
func AmiIDLTE(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmiID), v))
	})
}

// AmiIDContains applies the Contains predicate on the "ami_id" field.
func AmiIDContains(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAmiID), v))
	})
}

// AmiIDHasPrefix applies the HasPrefix predicate on the "ami_id" field.
func AmiIDHasPrefix(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAmiID), v))
	})
}

// AmiIDHasSuffix applies the HasSuffix predicate on the "ami_id" field.
func AmiIDHasSuffix(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAmiID), v))
	})
}

// AmiIDEqualFold applies the EqualFold predicate on the "ami_id" field.
func AmiIDEqualFold(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAmiID), v))
	})
}

// AmiIDContainsFold applies the ContainsFold predicate on the "ami_id" field.
func AmiIDContainsFold(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAmiID), v))
	})
}

// ResourcePrefixEQ applies the EQ predicate on the "resource_prefix" field.
func ResourcePrefixEQ(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResourcePrefix), v))
	})
}

// ResourcePrefixNEQ applies the NEQ predicate on the "resource_prefix" field.
func ResourcePrefixNEQ(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResourcePrefix), v))
	})
}

// ResourcePrefixIn applies the In predicate on the "resource_prefix" field.
func ResourcePrefixIn(vs ...string) predicate.Process {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Process(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResourcePrefix), v...))
	})
}

// ResourcePrefixNotIn applies the NotIn predicate on the "resource_prefix" field.
func ResourcePrefixNotIn(vs ...string) predicate.Process {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Process(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResourcePrefix), v...))
	})
}

// ResourcePrefixGT applies the GT predicate on the "resource_prefix" field.
func ResourcePrefixGT(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResourcePrefix), v))
	})
}

// ResourcePrefixGTE applies the GTE predicate on the "resource_prefix" field.
func ResourcePrefixGTE(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResourcePrefix), v))
	})
}

// ResourcePrefixLT applies the LT predicate on the "resource_prefix" field.
func ResourcePrefixLT(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResourcePrefix), v))
	})
}

// ResourcePrefixLTE applies the LTE predicate on the "resource_prefix" field.
func ResourcePrefixLTE(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResourcePrefix), v))
	})
}

// ResourcePrefixContains applies the Contains predicate on the "resource_prefix" field.
func ResourcePrefixContains(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResourcePrefix), v))
	})
}

// ResourcePrefixHasPrefix applies the HasPrefix predicate on the "resource_prefix" field.
func ResourcePrefixHasPrefix(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResourcePrefix), v))
	})
}

// ResourcePrefixHasSuffix applies the HasSuffix predicate on the "resource_prefix" field.
func ResourcePrefixHasSuffix(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResourcePrefix), v))
	})
}

// ResourcePrefixEqualFold applies the EqualFold predicate on the "resource_prefix" field.
func ResourcePrefixEqualFold(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResourcePrefix), v))
	})
}

// ResourcePrefixContainsFold applies the ContainsFold predicate on the "resource_prefix" field.
func ResourcePrefixContainsFold(v string) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResourcePrefix), v))
	})
}

// TimeoutEQ applies the EQ predicate on the "timeout" field.
func TimeoutEQ(v int) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeout), v))
	})
}

// TimeoutNEQ applies the NEQ predicate on the "timeout" field.
func TimeoutNEQ(v int) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimeout), v))
	})
}

// TimeoutIn applies the In predicate on the "timeout" field.
func TimeoutIn(vs ...int) predicate.Process {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Process(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTimeout), v...))
	})
}

// TimeoutNotIn applies the NotIn predicate on the "timeout" field.
func TimeoutNotIn(vs ...int) predicate.Process {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Process(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTimeout), v...))
	})
}

// TimeoutGT applies the GT predicate on the "timeout" field.
func TimeoutGT(v int) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimeout), v))
	})
}

// TimeoutGTE applies the GTE predicate on the "timeout" field.
func TimeoutGTE(v int) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimeout), v))
	})
}

// TimeoutLT applies the LT predicate on the "timeout" field.
func TimeoutLT(v int) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimeout), v))
	})
}

// TimeoutLTE applies the LTE predicate on the "timeout" field.
func TimeoutLTE(v int) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimeout), v))
	})
}

// TimeoutIsNil applies the IsNil predicate on the "timeout" field.
func TimeoutIsNil() predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTimeout)))
	})
}

// TimeoutNotNil applies the NotNil predicate on the "timeout" field.
func TimeoutNotNil() predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTimeout)))
	})
}

// ExpirationEQ applies the EQ predicate on the "expiration" field.
func ExpirationEQ(v int) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiration), v))
	})
}

// ExpirationNEQ applies the NEQ predicate on the "expiration" field.
func ExpirationNEQ(v int) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExpiration), v))
	})
}

// ExpirationIn applies the In predicate on the "expiration" field.
func ExpirationIn(vs ...int) predicate.Process {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Process(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExpiration), v...))
	})
}

// ExpirationNotIn applies the NotIn predicate on the "expiration" field.
func ExpirationNotIn(vs ...int) predicate.Process {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Process(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExpiration), v...))
	})
}

// ExpirationGT applies the GT predicate on the "expiration" field.
func ExpirationGT(v int) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExpiration), v))
	})
}

// ExpirationGTE applies the GTE predicate on the "expiration" field.
func ExpirationGTE(v int) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExpiration), v))
	})
}

// ExpirationLT applies the LT predicate on the "expiration" field.
func ExpirationLT(v int) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExpiration), v))
	})
}

// ExpirationLTE applies the LTE predicate on the "expiration" field.
func ExpirationLTE(v int) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExpiration), v))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v State) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v State) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...State) predicate.Process {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Process(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldState), v...))
	})
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...State) predicate.Process {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Process(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldState), v...))
	})
}

// HasStack applies the HasEdge predicate on the "stack" edge.
func HasStack() predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StackTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StackTable, StackColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStackWith applies the HasEdge predicate on the "stack" edge with a given conditions (other predicates).
func HasStackWith(preds ...predicate.Stack) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StackInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StackTable, StackColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCredentials applies the HasEdge predicate on the "credentials" edge.
func HasCredentials() predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CredentialsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CredentialsTable, CredentialsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCredentialsWith applies the HasEdge predicate on the "credentials" edge with a given conditions (other predicates).
func HasCredentialsWith(preds ...predicate.Credential) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CredentialsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CredentialsTable, CredentialsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTasks applies the HasEdge predicate on the "tasks" edge.
func HasTasks() predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TasksTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TasksTable, TasksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTasksWith applies the HasEdge predicate on the "tasks" edge with a given conditions (other predicates).
func HasTasksWith(preds ...predicate.Task) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TasksInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TasksTable, TasksColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Process) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Process) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Process) predicate.Process {
	return predicate.Process(func(s *sql.Selector) {
		p(s.Not())
	})
}
